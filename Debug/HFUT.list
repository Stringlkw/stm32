
HFUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000434c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004b9c  08004b9c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b9c  08004b9c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  200000ac  08004c50  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08004c50  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4cc  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b01  00000000  00000000  0002e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017da1  00000000  00000000  00032b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc82  00000000  00000000  0004a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000815d8  00000000  00000000  00058543  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9b1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a78  00000000  00000000  000d9b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000ac 	.word	0x200000ac
 8000200:	00000000 	.word	0x00000000
 8000204:	08004518 	.word	0x08004518

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b0 	.word	0x200000b0
 8000220:	08004518 	.word	0x08004518

08000224 <__gesf2>:
 8000224:	f04f 3cff 	mov.w	ip, #4294967295
 8000228:	e006      	b.n	8000238 <__cmpsf2+0x4>
 800022a:	bf00      	nop

0800022c <__lesf2>:
 800022c:	f04f 0c01 	mov.w	ip, #1
 8000230:	e002      	b.n	8000238 <__cmpsf2+0x4>
 8000232:	bf00      	nop

08000234 <__cmpsf2>:
 8000234:	f04f 0c01 	mov.w	ip, #1
 8000238:	f84d cd04 	str.w	ip, [sp, #-4]!
 800023c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000240:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000244:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000248:	bf18      	it	ne
 800024a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800024e:	d011      	beq.n	8000274 <__cmpsf2+0x40>
 8000250:	b001      	add	sp, #4
 8000252:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000256:	bf18      	it	ne
 8000258:	ea90 0f01 	teqne	r0, r1
 800025c:	bf58      	it	pl
 800025e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000262:	bf88      	it	hi
 8000264:	17c8      	asrhi	r0, r1, #31
 8000266:	bf38      	it	cc
 8000268:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800026c:	bf18      	it	ne
 800026e:	f040 0001 	orrne.w	r0, r0, #1
 8000272:	4770      	bx	lr
 8000274:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000278:	d102      	bne.n	8000280 <__cmpsf2+0x4c>
 800027a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800027e:	d105      	bne.n	800028c <__cmpsf2+0x58>
 8000280:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000284:	d1e4      	bne.n	8000250 <__cmpsf2+0x1c>
 8000286:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800028a:	d0e1      	beq.n	8000250 <__cmpsf2+0x1c>
 800028c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <__aeabi_cfrcmple>:
 8000294:	4684      	mov	ip, r0
 8000296:	4608      	mov	r0, r1
 8000298:	4661      	mov	r1, ip
 800029a:	e7ff      	b.n	800029c <__aeabi_cfcmpeq>

0800029c <__aeabi_cfcmpeq>:
 800029c:	b50f      	push	{r0, r1, r2, r3, lr}
 800029e:	f7ff ffc9 	bl	8000234 <__cmpsf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	bf48      	it	mi
 80002a6:	f110 0f00 	cmnmi.w	r0, #0
 80002aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080002ac <__aeabi_fcmpeq>:
 80002ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002b0:	f7ff fff4 	bl	800029c <__aeabi_cfcmpeq>
 80002b4:	bf0c      	ite	eq
 80002b6:	2001      	moveq	r0, #1
 80002b8:	2000      	movne	r0, #0
 80002ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80002be:	bf00      	nop

080002c0 <__aeabi_fcmplt>:
 80002c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002c4:	f7ff ffea 	bl	800029c <__aeabi_cfcmpeq>
 80002c8:	bf34      	ite	cc
 80002ca:	2001      	movcc	r0, #1
 80002cc:	2000      	movcs	r0, #0
 80002ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80002d2:	bf00      	nop

080002d4 <__aeabi_fcmple>:
 80002d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002d8:	f7ff ffe0 	bl	800029c <__aeabi_cfcmpeq>
 80002dc:	bf94      	ite	ls
 80002de:	2001      	movls	r0, #1
 80002e0:	2000      	movhi	r0, #0
 80002e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80002e6:	bf00      	nop

080002e8 <__aeabi_fcmpge>:
 80002e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002ec:	f7ff ffd2 	bl	8000294 <__aeabi_cfrcmple>
 80002f0:	bf94      	ite	ls
 80002f2:	2001      	movls	r0, #1
 80002f4:	2000      	movhi	r0, #0
 80002f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80002fa:	bf00      	nop

080002fc <__aeabi_fcmpgt>:
 80002fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000300:	f7ff ffc8 	bl	8000294 <__aeabi_cfrcmple>
 8000304:	bf34      	ite	cc
 8000306:	2001      	movcc	r0, #1
 8000308:	2000      	movcs	r0, #0
 800030a:	f85d fb08 	ldr.w	pc, [sp], #8
 800030e:	bf00      	nop

08000310 <BSP_BEEP_Config>:
 ****************************************************************/
#define BEEP_SET() HAL_GPIO_WritePin(BEEP_PORT, BEEP_PIN, GPIO_PIN_SET);
#define BEEP_RESET() HAL_GPIO_WritePin(BEEP_PORT, BEEP_PIN, GPIO_PIN_RESET);

void BSP_BEEP_Config()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
	{ 0 };
	/* Enalbe the GPIO_BEEP Clock */
	BEEP_CLK_ENABLE();
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <BSP_BEEP_Config+0x4c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a0c      	ldr	r2, [pc, #48]	; (800035c <BSP_BEEP_Config+0x4c>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <BSP_BEEP_Config+0x4c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
	/* Configure the GPIO_BEEP pin */
	GPIO_InitStruct.Pin = BEEP_PIN;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000344:	2303      	movs	r3, #3
 8000346:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BEEP_PORT, &GPIO_InitStruct);
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	4619      	mov	r1, r3
 800034e:	4804      	ldr	r0, [pc, #16]	; (8000360 <BSP_BEEP_Config+0x50>)
 8000350:	f001 fe52 	bl	8001ff8 <HAL_GPIO_Init>
}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40021000 	.word	0x40021000
 8000360:	40011000 	.word	0x40011000

08000364 <BSP_DS18B20_Config>:
 * @brief  DS18B20 初始化配置函数
 * @param  无
 * @retval DS18B20_Presence()
 */
uint8_t BSP_DS18B20_Config()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	DS18B20_Init();
 8000368:	f000 f80e 	bl	8000388 <DS18B20_Init>

	DS18B20_DQ_SET();
 800036c:	2201      	movs	r2, #1
 800036e:	2140      	movs	r1, #64	; 0x40
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <BSP_DS18B20_Config+0x20>)
 8000372:	f001 ffc2 	bl	80022fa <HAL_GPIO_WritePin>

	DS18B20_Rst();
 8000376:	f000 f857 	bl	8000428 <DS18B20_Rst>

	return DS18B20_Presence();
 800037a:	f000 f86f 	bl	800045c <DS18B20_Presence>
 800037e:	4603      	mov	r3, r0

}
 8000380:	4618      	mov	r0, r3
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40011400 	.word	0x40011400

08000388 <DS18B20_Init>:
 * 描述  ：配置DS18B20用到的I/O口
 * 输入  ：无
 * 输出  ：无
 */
static void DS18B20_Init()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
	/*定义一个GPIO_InitTypeDef类型的结构体*/
	GPIO_InitTypeDef GPIO_InitStruct =
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
	{ 0 };

	/*开启DS18B20_DQ_GPIO_PORT的外设时钟*/
	DS18B20_CLK_ENABLE();
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <DS18B20_Init+0x4c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <DS18B20_Init+0x4c>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <DS18B20_Init+0x4c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0320 	and.w	r3, r3, #32
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]

	/*选择要控制的DS18B20_DQ_GPIO_PORT引脚*/
	GPIO_InitStruct.Pin = DS18B20_PIN;
 80003b4:	2340      	movs	r3, #64	; 0x40
 80003b6:	60bb      	str	r3, [r7, #8]

	/*设置引脚模式为通用推挽输出*/
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]

	/*设置引脚速率为50MHz */
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003bc:	2303      	movs	r3, #3
 80003be:	617b      	str	r3, [r7, #20]

	/*调用库函数，初始化DS18B20_DQ_GPIO_PORT*/
	HAL_GPIO_Init( DS18B20_PORT, &GPIO_InitStruct);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <DS18B20_Init+0x50>)
 80003c8:	f001 fe16 	bl	8001ff8 <HAL_GPIO_Init>

}
 80003cc:	bf00      	nop
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40011400 	.word	0x40011400

080003dc <DS18B20_Mode_IPU>:
 * 描述  ：使DS18B20-DATA引脚变为输入模式
 * 输入  ：无
 * 输出  ：无
 */
static void DS18B20_Mode_IPU()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/*选择要控制的DS18B20_DQ_GPIO_PORT引脚*/
	GPIO_InitStruct.Pin = DS18B20_PIN;
 80003e2:	2340      	movs	r3, #64	; 0x40
 80003e4:	603b      	str	r3, [r7, #0]

	/*设置引脚模式为浮空输入模式*/
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]

	/*调用库函数，初始化DS18B20_DQ_GPIO_PORT*/
	HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80003ea:	463b      	mov	r3, r7
 80003ec:	4619      	mov	r1, r3
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <DS18B20_Mode_IPU+0x20>)
 80003f0:	f001 fe02 	bl	8001ff8 <HAL_GPIO_Init>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40011400 	.word	0x40011400

08000400 <DS18B20_Mode_Out_PP>:
 * 描述  ：使DS18B20-DATA引脚变为输出模式
 * 输入  ：无
 * 输出  ：无
 */
static void DS18B20_Mode_Out_PP()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/*选择要控制的DS18B20_DQ_GPIO_PORT引脚*/
	GPIO_InitStruct.Pin = DS18B20_PIN;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	603b      	str	r3, [r7, #0]

	/*设置引脚模式为通用推挽输出*/
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]

	/*设置引脚速率为50MHz */
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040e:	2303      	movs	r3, #3
 8000410:	60fb      	str	r3, [r7, #12]

	/*调用库函数，初始化DS18B20_DQ_GPIO_PORT*/
	HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8000412:	463b      	mov	r3, r7
 8000414:	4619      	mov	r1, r3
 8000416:	4803      	ldr	r0, [pc, #12]	; (8000424 <DS18B20_Mode_Out_PP+0x24>)
 8000418:	f001 fdee 	bl	8001ff8 <HAL_GPIO_Init>
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40011400 	.word	0x40011400

08000428 <DS18B20_Rst>:

/*
 *主机给从机发送复位脉冲
 */
static void DS18B20_Rst()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	/* 主机设置为推挽输出 */
	DS18B20_Mode_Out_PP();
 800042c:	f7ff ffe8 	bl	8000400 <DS18B20_Mode_Out_PP>

	DS18B20_DQ_RESET();
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4808      	ldr	r0, [pc, #32]	; (8000458 <DS18B20_Rst+0x30>)
 8000436:	f001 ff60 	bl	80022fa <HAL_GPIO_WritePin>
	/* 主机至少产生480us的低电平复位信号 */
	DS18B20_DELAY_US(750);
 800043a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800043e:	f000 f86f 	bl	8000520 <CPU_TS_Tmr_Delay_US>

	/* 主机在产生复位信号后，需将总线拉高 */
	DS18B20_DQ_SET();
 8000442:	2201      	movs	r2, #1
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <DS18B20_Rst+0x30>)
 8000448:	f001 ff57 	bl	80022fa <HAL_GPIO_WritePin>

	/*从机接收到主机的复位信号后，会在15~60us后给主机发一个存在脉冲*/
	DS18B20_DELAY_US(15);
 800044c:	200f      	movs	r0, #15
 800044e:	f000 f867 	bl	8000520 <CPU_TS_Tmr_Delay_US>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40011400 	.word	0x40011400

0800045c <DS18B20_Presence>:
 * 检测从机给主机返回的存在脉冲
 * 0：成功
 * 1：失败
 */
static uint8_t DS18B20_Presence()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	uint8_t pulse_time = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	71fb      	strb	r3, [r7, #7]

	/* 主机设置为上拉输入 */
	DS18B20_Mode_IPU();
 8000466:	f7ff ffb9 	bl	80003dc <DS18B20_Mode_IPU>

	/* 等待存在脉冲的到来，存在脉冲为一个60~240us的低电平信号
	 * 如果存在脉冲没有来则做超时处理，从机接收到主机的复位信号后，会在15~60us后给主机发一个存在脉冲
	 */
	while ( DS18B20_DQ_IN() && pulse_time < 100)
 800046a:	e005      	b.n	8000478 <DS18B20_Presence+0x1c>
	{
		pulse_time++;
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	3301      	adds	r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
		DS18B20_DELAY_US(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f000 f854 	bl	8000520 <CPU_TS_Tmr_Delay_US>
	while ( DS18B20_DQ_IN() && pulse_time < 100)
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	4815      	ldr	r0, [pc, #84]	; (80004d0 <DS18B20_Presence+0x74>)
 800047c:	f001 ff26 	bl	80022cc <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <DS18B20_Presence+0x30>
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b63      	cmp	r3, #99	; 0x63
 800048a:	d9ef      	bls.n	800046c <DS18B20_Presence+0x10>
	}
	/* 经过100us后，存在脉冲都还没有到来*/
	if (pulse_time >= 100)
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2b63      	cmp	r3, #99	; 0x63
 8000490:	d901      	bls.n	8000496 <DS18B20_Presence+0x3a>
		return 1;
 8000492:	2301      	movs	r3, #1
 8000494:	e018      	b.n	80004c8 <DS18B20_Presence+0x6c>
	else
		pulse_time = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]

	/* 存在脉冲到来，且存在的时间不能超过240us */
	while (!DS18B20_DQ_IN() && pulse_time < 240)
 800049a:	e005      	b.n	80004a8 <DS18B20_Presence+0x4c>
	{
		pulse_time++;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	3301      	adds	r3, #1
 80004a0:	71fb      	strb	r3, [r7, #7]
		DS18B20_DELAY_US(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 f83c 	bl	8000520 <CPU_TS_Tmr_Delay_US>
	while (!DS18B20_DQ_IN() && pulse_time < 240)
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	4809      	ldr	r0, [pc, #36]	; (80004d0 <DS18B20_Presence+0x74>)
 80004ac:	f001 ff0e 	bl	80022cc <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d102      	bne.n	80004bc <DS18B20_Presence+0x60>
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2bef      	cmp	r3, #239	; 0xef
 80004ba:	d9ef      	bls.n	800049c <DS18B20_Presence+0x40>
	}
	if (pulse_time >= 240)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2bef      	cmp	r3, #239	; 0xef
 80004c0:	d901      	bls.n	80004c6 <DS18B20_Presence+0x6a>
		return 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e000      	b.n	80004c8 <DS18B20_Presence+0x6c>
	else
		return 0;
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40011400 	.word	0x40011400

080004d4 <CPU_TS_TmrInit>:
  * @param  无
  * @retval 无
  * @note   使用延时函数前，必须调用本函数
  */
void CPU_TS_TmrInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    /* 使能DWT外设 */
    DEM_CR |= (uint32_t)DEM_CR_TRCENA;                
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <CPU_TS_TmrInit+0x2c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <CPU_TS_TmrInit+0x2c>)
 80004de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e2:	6013      	str	r3, [r2, #0]

    /* DWT CYCCNT寄存器计数清0 */
    DWT_CYCCNT = (uint32_t)0u;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <CPU_TS_TmrInit+0x30>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]

    /* 使能Cortex-M DWT CYCCNT寄存器 */
    DWT_CR |= (uint32_t)DWT_CR_CYCCNTENA;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <CPU_TS_TmrInit+0x34>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <CPU_TS_TmrInit+0x34>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0001004 	.word	0xe0001004
 8000508:	e0001000 	.word	0xe0001000

0800050c <CPU_TS_TmrRd>:
  * @brief  读取当前时间戳
  * @param  无
  * @retval 当前时间戳，即DWT_CYCCNT寄存器的值
  */
uint32_t CPU_TS_TmrRd(void)
{        
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return ((uint32_t)DWT_CYCCNT);
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <CPU_TS_TmrRd+0x10>)
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	e0001004 	.word	0xe0001004

08000520 <CPU_TS_Tmr_Delay_US>:
  * @note   使用本函数前必须先调用CPU_TS_TmrInit函数使能计数器，
            或使能宏CPU_TS_INIT_IN_DELAY_FUNCTION
            最大延时值为8秒，即8*1000*1000
  */
void CPU_TS_Tmr_Delay_US(__IO uint32_t us)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t ticks;
  uint32_t told,tnow,tcnt=0;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]

  /* 在函数内部初始化时间戳寄存器， */  
#if (CPU_TS_INIT_IN_DELAY_FUNCTION)  
  /* 初始化时间戳并清零 */
  CPU_TS_TmrInit();
 800052c:	f7ff ffd2 	bl	80004d4 <CPU_TS_TmrInit>
#endif
  
  ticks = us * (GET_CPU_ClkFreq() / 1000000);  /* 需要的节拍数 */      
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <CPU_TS_Tmr_Delay_US+0x78>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a19      	ldr	r2, [pc, #100]	; (800059c <CPU_TS_Tmr_Delay_US+0x7c>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9b      	lsrs	r3, r3, #18
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	60fb      	str	r3, [r7, #12]
  tcnt = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  told = (uint32_t)CPU_TS_TmrRd();         /* 刚进入时的计数器值 */
 8000548:	f7ff ffe0 	bl	800050c <CPU_TS_TmrRd>
 800054c:	6178      	str	r0, [r7, #20]

  while(1)
  {
    tnow = (uint32_t)CPU_TS_TmrRd();  
 800054e:	f7ff ffdd 	bl	800050c <CPU_TS_TmrRd>
 8000552:	60b8      	str	r0, [r7, #8]
    if(tnow != told)
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	429a      	cmp	r2, r3
 800055a:	d0f8      	beq.n	800054e <CPU_TS_Tmr_Delay_US+0x2e>
    { 
        /* 32位计数器是递增计数器 */    
      if(tnow > told)
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	429a      	cmp	r2, r3
 8000562:	d906      	bls.n	8000572 <CPU_TS_Tmr_Delay_US+0x52>
      {
        tcnt += tnow - told;  
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	4413      	add	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	e006      	b.n	8000580 <CPU_TS_Tmr_Delay_US+0x60>
      }
      /* 重新装载 */
      else 
      {
        tcnt += UINT32_MAX - told + tnow; 
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	1ad2      	subs	r2, r2, r3
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	4413      	add	r3, r2
 800057c:	3b01      	subs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
      } 
      
      told = tnow;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	617b      	str	r3, [r7, #20]

      /*时间超过/等于要延迟的时间,则退出 */
      if(tcnt >= ticks)break;
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	429a      	cmp	r2, r3
 800058a:	d200      	bcs.n	800058e <CPU_TS_Tmr_Delay_US+0x6e>
    tnow = (uint32_t)CPU_TS_TmrRd();  
 800058c:	e7df      	b.n	800054e <CPU_TS_Tmr_Delay_US+0x2e>
      if(tcnt >= ticks)break;
 800058e:	bf00      	nop
    }  
  }
}
 8000590:	bf00      	nop
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000003c 	.word	0x2000003c
 800059c:	431bde83 	.word	0x431bde83

080005a0 <BSP_KEY_Init>:
 * @arg			KEY0~KEY3
 * @return		None
 * @note
 ****************************************************************/
void BSP_KEY_Init(KEY_INDEX Key)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct =
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
	{ 0 };
	/* Enalbe the GPIO_KEY Clock */
	KEYx_CLK_ENABLE(Key);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10c      	bne.n	80005d8 <BSP_KEY_Init+0x38>
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	e02e      	b.n	8000636 <BSP_KEY_Init+0x96>
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10c      	bne.n	80005f8 <BSP_KEY_Init+0x58>
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <BSP_KEY_Init+0xc4>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	e01e      	b.n	8000636 <BSP_KEY_Init+0x96>
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d10c      	bne.n	8000618 <BSP_KEY_Init+0x78>
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <BSP_KEY_Init+0xc4>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <BSP_KEY_Init+0xc4>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <BSP_KEY_Init+0xc4>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	e00e      	b.n	8000636 <BSP_KEY_Init+0x96>
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d10b      	bne.n	8000636 <BSP_KEY_Init+0x96>
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <BSP_KEY_Init+0xc4>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <BSP_KEY_Init+0xc4>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <BSP_KEY_Init+0xc4>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = KEY_PIN[Key];
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <BSP_KEY_Init+0xc8>)
 800063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <BSP_KEY_Init+0xcc>)
 8000642:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(KEY_PORT[Key], &GPIO_InitStruct);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <BSP_KEY_Init+0xd0>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	f107 0218 	add.w	r2, r7, #24
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fcce 	bl	8001ff8 <HAL_GPIO_Init>
}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	08004548 	.word	0x08004548
 800066c:	10210000 	.word	0x10210000
 8000670:	20000000 	.word	0x20000000

08000674 <BSP_KEY_Config>:


void BSP_KEY_Config()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	BSP_KEY_Init(KEY0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff91 	bl	80005a0 <BSP_KEY_Init>
	BSP_KEY_Init(KEY1);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff8e 	bl	80005a0 <BSP_KEY_Init>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <BSP_LED_Init>:
 * @arg			LED0~LED3
 * @return		None
 * @note
 ****************************************************************/
void BSP_LED_Init(LED_INDEX Led)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
	{ 0 };
	/* Enalbe the GPIO_LED Clock */
	LEDx_CLK_ENABLE(Led);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10c      	bne.n	80006c0 <BSP_LED_Init+0x38>
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <BSP_LED_Init+0xe0>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <BSP_LED_Init+0xe0>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <BSP_LED_Init+0xe0>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	e02e      	b.n	800071e <BSP_LED_Init+0x96>
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d10c      	bne.n	80006e0 <BSP_LED_Init+0x58>
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <BSP_LED_Init+0xe0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <BSP_LED_Init+0xe0>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <BSP_LED_Init+0xe0>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	e01e      	b.n	800071e <BSP_LED_Init+0x96>
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d10c      	bne.n	8000700 <BSP_LED_Init+0x78>
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <BSP_LED_Init+0xe0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <BSP_LED_Init+0xe0>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <BSP_LED_Init+0xe0>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	e00e      	b.n	800071e <BSP_LED_Init+0x96>
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b03      	cmp	r3, #3
 8000704:	d10b      	bne.n	800071e <BSP_LED_Init+0x96>
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <BSP_LED_Init+0xe0>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <BSP_LED_Init+0xe0>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <BSP_LED_Init+0xe0>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = LED_PIN[Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <BSP_LED_Init+0xe4>)
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <BSP_LED_Init+0xe8>)
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	f107 0218 	add.w	r2, r7, #24
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fc58 	bl	8001ff8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <BSP_LED_Init+0xe8>)
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <BSP_LED_Init+0xe4>)
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	f001 fdcd 	bl	80022fa <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	08004550 	.word	0x08004550
 8000770:	20000010 	.word	0x20000010

08000774 <BSP_LED_Config>:
 * @arg			LED0~LED3
 * @return		None
 * @note
 ****************************************************************/
void BSP_LED_Config()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED0);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff85 	bl	8000688 <BSP_LED_Init>
	BSP_LED_Init(LED1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff82 	bl	8000688 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000784:	2002      	movs	r0, #2
 8000786:	f7ff ff7f 	bl	8000688 <BSP_LED_Init>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <BSP_LED_Off>:
 * @arg			LED0~LED3
 * @return		None
 * @note
 ****************************************************************/
void BSP_LED_Off(LED_INDEX Led)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <BSP_LED_Off+0x2c>)
 800079e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <BSP_LED_Off+0x30>)
 80007a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	f001 fda4 	bl	80022fa <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000010 	.word	0x20000010
 80007c0:	08004550 	.word	0x08004550

080007c4 <BSP_CO2_Tx>:
{ 0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79 };
uint8_t rx_array[9] =
{ 0x00 };

void BSP_CO2_Tx (uint16_t *CO2Data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint16_t co2_value;
	HAL_UART_Transmit (&huart2, tx_array, 9, 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2209      	movs	r2, #9
 80007d0:	4914      	ldr	r1, [pc, #80]	; (8000824 <BSP_CO2_Tx+0x60>)
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <BSP_CO2_Tx+0x64>)
 80007d4:	f002 fdc3 	bl	800335e <HAL_UART_Transmit>
	HAL_UART_Receive (&huart2, rx_array, 9, 100);
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	2209      	movs	r2, #9
 80007dc:	4913      	ldr	r1, [pc, #76]	; (800082c <BSP_CO2_Tx+0x68>)
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <BSP_CO2_Tx+0x64>)
 80007e0:	f002 fe56 	bl	8003490 <HAL_UART_Receive>
	if (getCheckSum() == rx_array[8])
 80007e4:	f000 f824 	bl	8000830 <getCheckSum>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <BSP_CO2_Tx+0x68>)
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d109      	bne.n	8000808 <BSP_CO2_Tx+0x44>
	{
		co2_value = (uint16_t) rx_array[2] * 256 + (uint16_t) rx_array[3];
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <BSP_CO2_Tx+0x68>)
 80007f6:	789b      	ldrb	r3, [r3, #2]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <BSP_CO2_Tx+0x68>)
 8000800:	78db      	ldrb	r3, [r3, #3]
 8000802:	b29b      	uxth	r3, r3
 8000804:	4413      	add	r3, r2
 8000806:	81fb      	strh	r3, [r7, #14]
	}
	if(co2_value > 9999)
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	f242 720f 	movw	r2, #9999	; 0x270f
 800080e:	4293      	cmp	r3, r2
 8000810:	d901      	bls.n	8000816 <BSP_CO2_Tx+0x52>
	{
		co2_value=0;
 8000812:	2300      	movs	r3, #0
 8000814:	81fb      	strh	r3, [r7, #14]
	}
	*CO2Data = co2_value;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	89fa      	ldrh	r2, [r7, #14]
 800081a:	801a      	strh	r2, [r3, #0]


}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000020 	.word	0x20000020
 8000828:	200005f0 	.word	0x200005f0
 800082c:	200000c8 	.word	0x200000c8

08000830 <getCheckSum>:


uint8_t getCheckSum()
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	uint8_t i, checksum = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
	for (i = 1; i < 8; i++)
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e008      	b.n	8000852 <getCheckSum+0x22>
	{
		checksum += rx_array[i];
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <getCheckSum+0x40>)
 8000844:	5cd2      	ldrb	r2, [r2, r3]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	4413      	add	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	for (i = 1; i < 8; i++)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3301      	adds	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b07      	cmp	r3, #7
 8000856:	d9f3      	bls.n	8000840 <getCheckSum+0x10>
	}
	checksum = 0xff - checksum;
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	43db      	mvns	r3, r3
 800085c:	71bb      	strb	r3, [r7, #6]
	checksum += 1;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	3301      	adds	r3, #1
 8000862:	71bb      	strb	r3, [r7, #6]
	return checksum;
 8000864:	79bb      	ldrb	r3, [r7, #6]

}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	200000c8 	.word	0x200000c8

08000874 <OLED_WrDat>:




void OLED_WrDat(unsigned char dat) //写数据
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	OLED_DC_Set();
 800087e:	2201      	movs	r2, #1
 8000880:	2110      	movs	r1, #16
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <OLED_WrDat+0x70>)
 8000884:	f001 fd39 	bl	80022fa <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e023      	b.n	80008d6 <OLED_WrDat+0x62>
	{
		if ((dat << i) & 0x80)
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <OLED_WrDat+0x38>
		{
			OLED_SDA_Set();
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <OLED_WrDat+0x74>)
 80008a6:	f001 fd28 	bl	80022fa <HAL_GPIO_WritePin>
 80008aa:	e005      	b.n	80008b8 <OLED_WrDat+0x44>
		}
		else
			OLED_SDA_Reset();
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <OLED_WrDat+0x74>)
 80008b4:	f001 fd21 	bl	80022fa <HAL_GPIO_WritePin>
		OLED_SCL_Reset();
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <OLED_WrDat+0x74>)
 80008c0:	f001 fd1b 	bl	80022fa <HAL_GPIO_WritePin>
		OLED_SCL_Set();
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <OLED_WrDat+0x74>)
 80008cc:	f001 fd15 	bl	80022fa <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	d9d8      	bls.n	800088e <OLED_WrDat+0x1a>
	}
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40010c00 	.word	0x40010c00

080008ec <OLED_WrCmd>:

void OLED_WrCmd(unsigned char cmd) //写命令
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	OLED_DC_Reset();
 80008f6:	2200      	movs	r2, #0
 80008f8:	2110      	movs	r1, #16
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <OLED_WrCmd+0x70>)
 80008fc:	f001 fcfd 	bl	80022fa <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) //发送一个八位数据
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e023      	b.n	800094e <OLED_WrCmd+0x62>
	{
		if ((cmd << i) & 0x80)
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	2b00      	cmp	r3, #0
 8000914:	d006      	beq.n	8000924 <OLED_WrCmd+0x38>
		{
			OLED_SDA_Set();
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <OLED_WrCmd+0x74>)
 800091e:	f001 fcec 	bl	80022fa <HAL_GPIO_WritePin>
 8000922:	e005      	b.n	8000930 <OLED_WrCmd+0x44>
		}
		else
		{
			OLED_SDA_Reset();
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <OLED_WrCmd+0x74>)
 800092c:	f001 fce5 	bl	80022fa <HAL_GPIO_WritePin>
		}
		OLED_SCL_Reset();
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <OLED_WrCmd+0x74>)
 8000938:	f001 fcdf 	bl	80022fa <HAL_GPIO_WritePin>
		OLED_SCL_Set();
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <OLED_WrCmd+0x74>)
 8000944:	f001 fcd9 	bl	80022fa <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) //发送一个八位数据
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3301      	adds	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d9d8      	bls.n	8000906 <OLED_WrCmd+0x1a>
	}
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40011000 	.word	0x40011000
 8000960:	40010c00 	.word	0x40010c00

08000964 <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
	OLED_WrCmd(0xb0 + y);
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	3b50      	subs	r3, #80	; 0x50
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffb6 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(((x & 0xf0) >> 4) | 0x10);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffad 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd((x & 0x0f) | 0x01);
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	f003 030e 	and.w	r3, r3, #14
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffa1 	bl	80008ec <OLED_WrCmd>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <OLED_Fill>:

void OLED_Fill(unsigned char bmp_dat) //全屏填充
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
	unsigned char y, x;
	for (y = 0; y < 8; y++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e01c      	b.n	80009fc <OLED_Fill+0x4a>
	{
		OLED_WrCmd(0xb0 + y);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3b50      	subs	r3, #80	; 0x50
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff8f 	bl	80008ec <OLED_WrCmd>
		OLED_WrCmd(0x01);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff ff8c 	bl	80008ec <OLED_WrCmd>
		OLED_WrCmd(0x10);
 80009d4:	2010      	movs	r0, #16
 80009d6:	f7ff ff89 	bl	80008ec <OLED_WrCmd>
		for (x = 0; x < X_WIDTH; x++)
 80009da:	2300      	movs	r3, #0
 80009dc:	73bb      	strb	r3, [r7, #14]
 80009de:	e006      	b.n	80009ee <OLED_Fill+0x3c>
		{
			OLED_WrDat(bmp_dat);
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff46 	bl	8000874 <OLED_WrDat>
		for (x = 0; x < X_WIDTH; x++)
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73bb      	strb	r3, [r7, #14]
 80009ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	daf4      	bge.n	80009e0 <OLED_Fill+0x2e>
	for (y = 0; y < 8; y++)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d9df      	bls.n	80009c2 <OLED_Fill+0x10>
		}
	}
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <OLED_Init>:



void OLED_Init(OLED_INDEX Oled)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

	OLEDx_CLK_ENABLE(Oled);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10c      	bne.n	8000a36 <OLED_Init+0x2a>
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <OLED_Init+0xd0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <OLED_Init+0xd0>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <OLED_Init+0xd0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	e02e      	b.n	8000a94 <OLED_Init+0x88>
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10c      	bne.n	8000a56 <OLED_Init+0x4a>
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <OLED_Init+0xd0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <OLED_Init+0xd0>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <OLED_Init+0xd0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	e01e      	b.n	8000a94 <OLED_Init+0x88>
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10c      	bne.n	8000a76 <OLED_Init+0x6a>
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <OLED_Init+0xd0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <OLED_Init+0xd0>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <OLED_Init+0xd0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	e00e      	b.n	8000a94 <OLED_Init+0x88>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d10b      	bne.n	8000a94 <OLED_Init+0x88>
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <OLED_Init+0xd0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <OLED_Init+0xd0>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <OLED_Init+0xd0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = OLED_PIN[Oled];
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <OLED_Init+0xd4>)
 8000a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OLED_PORT[Oled], &GPIO_InitStruct);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <OLED_Init+0xd8>)
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	f107 0218 	add.w	r2, r7, #24
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa9f 	bl	8001ff8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(OLED_PORT[Oled], OLED_PIN[Oled], GPIO_PIN_SET);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <OLED_Init+0xd8>)
 8000abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <OLED_Init+0xd4>)
 8000ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	f001 fc14 	bl	80022fa <HAL_GPIO_WritePin>
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	08004b48 	.word	0x08004b48
 8000ae4:	2000002c 	.word	0x2000002c

08000ae8 <BSP_OLED_Config>:

void BSP_OLED_Config()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	OLED_Init(DC);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff ff8d 	bl	8000a0c <OLED_Init>
	OLED_Init(CS);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff ff8a 	bl	8000a0c <OLED_Init>
	OLED_Init(SDA);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff ff87 	bl	8000a0c <OLED_Init>
	OLED_Init(SCL);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f7ff ff84 	bl	8000a0c <OLED_Init>

	HAL_Delay(500);
 8000b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b08:	f000 fd8c 	bl	8001624 <HAL_Delay>
	OLED_CS_Reset();
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	4831      	ldr	r0, [pc, #196]	; (8000bd8 <BSP_OLED_Config+0xf0>)
 8000b14:	f001 fbf1 	bl	80022fa <HAL_GPIO_WritePin>

	OLED_WrCmd(0xae);
 8000b18:	20ae      	movs	r0, #174	; 0xae
 8000b1a:	f7ff fee7 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xae);	//--turn off oled panel
 8000b1e:	20ae      	movs	r0, #174	; 0xae
 8000b20:	f7ff fee4 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x00);	//---set low column address
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fee1 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x10);	//---set high column address
 8000b2a:	2010      	movs	r0, #16
 8000b2c:	f7ff fede 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000b30:	2040      	movs	r0, #64	; 0x40
 8000b32:	f7ff fedb 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x81);	//--set contrast control register
 8000b36:	2081      	movs	r0, #129	; 0x81
 8000b38:	f7ff fed8 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
 8000b3c:	20cf      	movs	r0, #207	; 0xcf
 8000b3e:	f7ff fed5 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xa1); //--Set SEG/Column Mapping     0xa0,0xa1
 8000b42:	20a1      	movs	r0, #161	; 0xa1
 8000b44:	f7ff fed2 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xc8); //Set COM/Row Scan Direction   0xc0,0xc8
 8000b48:	20c8      	movs	r0, #200	; 0xc8
 8000b4a:	f7ff fecf 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xa6); //--set normal display
 8000b4e:	20a6      	movs	r0, #166	; 0xa6
 8000b50:	f7ff fecc 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xa8); //--set multiplex ratio(1 to 64)
 8000b54:	20a8      	movs	r0, #168	; 0xa8
 8000b56:	f7ff fec9 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x3f); //--1/64 duty
 8000b5a:	203f      	movs	r0, #63	; 0x3f
 8000b5c:	f7ff fec6 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xd3); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8000b60:	20d3      	movs	r0, #211	; 0xd3
 8000b62:	f7ff fec3 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x00); //-not offset
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fec0 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 8000b6c:	20d5      	movs	r0, #213	; 0xd5
 8000b6e:	f7ff febd 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x80); //--set divide ratio, Set Clock as 100 Frames/Sec
 8000b72:	2080      	movs	r0, #128	; 0x80
 8000b74:	f7ff feba 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xd9); //--set pre-charge period
 8000b78:	20d9      	movs	r0, #217	; 0xd9
 8000b7a:	f7ff feb7 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xf1); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000b7e:	20f1      	movs	r0, #241	; 0xf1
 8000b80:	f7ff feb4 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xda); //--set com pins hardware configuration
 8000b84:	20da      	movs	r0, #218	; 0xda
 8000b86:	f7ff feb1 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x12);
 8000b8a:	2012      	movs	r0, #18
 8000b8c:	f7ff feae 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xdb); //--set vcomh
 8000b90:	20db      	movs	r0, #219	; 0xdb
 8000b92:	f7ff feab 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x40); //Set VCOM Deselect Level
 8000b96:	2040      	movs	r0, #64	; 0x40
 8000b98:	f7ff fea8 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x20); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	f7ff fea5 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x02); //
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff fea2 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x8d); //--set Charge Pump enable/disable
 8000ba8:	208d      	movs	r0, #141	; 0x8d
 8000baa:	f7ff fe9f 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0x14); //--set(0x10) disable
 8000bae:	2014      	movs	r0, #20
 8000bb0:	f7ff fe9c 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xa4); // Disable Entire Display On (0xa4/0xa5)
 8000bb4:	20a4      	movs	r0, #164	; 0xa4
 8000bb6:	f7ff fe99 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xa6); // Disable Inverse Display On (0xa6/a7)
 8000bba:	20a6      	movs	r0, #166	; 0xa6
 8000bbc:	f7ff fe96 	bl	80008ec <OLED_WrCmd>
	OLED_WrCmd(0xaf); //--turn on oled panel
 8000bc0:	20af      	movs	r0, #175	; 0xaf
 8000bc2:	f7ff fe93 	bl	80008ec <OLED_WrCmd>
	OLED_Fill(0x00);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fef3 	bl	80009b2 <OLED_Fill>
	OLED_SetPos(0, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fec8 	bl	8000964 <OLED_SetPos>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40012000 	.word	0x40012000

08000bdc <BSP_OLED_CLS>:

void BSP_OLED_CLS() //清屏
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fee6 	bl	80009b2 <OLED_Fill>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <BSP_OLED_Big_Str>:
		j++;
	}
}

void BSP_OLED_Big_Str(uint8_t x, uint8_t y, uint8_t ch[])
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	603a      	str	r2, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	71bb      	strb	r3, [r7, #6]
	uint8_t c = 0, i = 0, j = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	737b      	strb	r3, [r7, #13]
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	2300      	movs	r3, #0
 8000c06:	73bb      	strb	r3, [r7, #14]
	while (ch[j] != '\0')
 8000c08:	e046      	b.n	8000c98 <BSP_OLED_Big_Str+0xac>
	{
		c = ch[j] - 32;
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	3b20      	subs	r3, #32
 8000c14:	737b      	strb	r3, [r7, #13]
		if (x > 120)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b78      	cmp	r3, #120	; 0x78
 8000c1a:	d904      	bls.n	8000c26 <BSP_OLED_Big_Str+0x3a>
		{
			x = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71fb      	strb	r3, [r7, #7]
			y++;
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	3301      	adds	r3, #1
 8000c24:	71bb      	strb	r3, [r7, #6]
		}
		OLED_SetPos(x, y);
 8000c26:	79ba      	ldrb	r2, [r7, #6]
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe99 	bl	8000964 <OLED_SetPos>
		for (i = 0; i < 8; i++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e00b      	b.n	8000c50 <BSP_OLED_Big_Str+0x64>
		{
			OLED_WrDat(F8X16[c * 16 + i]);
 8000c38:	7b7b      	ldrb	r3, [r7, #13]
 8000c3a:	011a      	lsls	r2, r3, #4
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <BSP_OLED_Big_Str+0xc0>)
 8000c42:	5cd3      	ldrb	r3, [r2, r3]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe15 	bl	8000874 <OLED_WrDat>
		for (i = 0; i < 8; i++)
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d9f0      	bls.n	8000c38 <BSP_OLED_Big_Str+0x4c>
		}
		OLED_SetPos(x, y + 1);
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe7f 	bl	8000964 <OLED_SetPos>
		for (i = 0; i < 8; i++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00c      	b.n	8000c86 <BSP_OLED_Big_Str+0x9a>
		{
			OLED_WrDat(F8X16[c * 16 + i + 8]);
 8000c6c:	7b7b      	ldrb	r3, [r7, #13]
 8000c6e:	011a      	lsls	r2, r3, #4
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4413      	add	r3, r2
 8000c74:	3308      	adds	r3, #8
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <BSP_OLED_Big_Str+0xc0>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fdfa 	bl	8000874 <OLED_WrDat>
		for (i = 0; i < 8; i++)
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	3301      	adds	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d9ef      	bls.n	8000c6c <BSP_OLED_Big_Str+0x80>
		}
		x += 8;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	71fb      	strb	r3, [r7, #7]
		j++;
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	3301      	adds	r3, #1
 8000c96:	73bb      	strb	r3, [r7, #14]
	while (ch[j] != '\0')
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1b2      	bne.n	8000c0a <BSP_OLED_Big_Str+0x1e>
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08004558 	.word	0x08004558

08000cb0 <BSP_SR501_EXTI_Config>:
 * @brief  配置 IO为EXTI中断口，并设置中断优先级
 * @param  无
 * @retval 无
 */
void BSP_SR501_EXTI_Config()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
	{ 0 };

	/*开启SR501 GPIO口的时钟*/
	SR501_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <BSP_SR501_EXTI_Config+0x68>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <BSP_SR501_EXTI_Config+0x68>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <BSP_SR501_EXTI_Config+0x68>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

	/*--------------------------GPIO配置-----------------------------*/
	/* 选择按键用到的GPIO */
	GPIO_InitStruct.Pin = SR501_INT_PIN;
 8000cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce0:	60bb      	str	r3, [r7, #8]
	/* 配置为浮空输入 */
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <BSP_SR501_EXTI_Config+0x6c>)
 8000ce4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SR501_INT_PORT, &GPIO_InitStruct);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <BSP_SR501_EXTI_Config+0x70>)
 8000cf2:	f001 f981 	bl	8001ff8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(SR501_INT_EXTI_IRQ, 15, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	2017      	movs	r0, #23
 8000cfc:	f000 fd8b 	bl	8001816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SR501_INT_EXTI_IRQ);
 8000d00:	2017      	movs	r0, #23
 8000d02:	f000 fda4 	bl	800184e <HAL_NVIC_EnableIRQ>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d0a:	f001 fb0f 	bl	800232c <HAL_GPIO_EXTI_IRQHandler>

}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	40010800 	.word	0x40010800

08000d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	200e      	movs	r0, #14
 8000d48:	f000 fd65 	bl	8001816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d4c:	200e      	movs	r0, #14
 8000d4e:	f000 fd7e 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 fd5d 	bl	8001816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d5c:	200f      	movs	r0, #15
 8000d5e:	f000 fd76 	bl	800184e <HAL_NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2130      	movs	r1, #48	; 0x30
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_GPIO_Init+0x90>)
 8000dba:	f001 fa9e 	bl	80022fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = zhendong_Pin;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(zhendong_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_GPIO_Init+0x94>)
 8000dd2:	f001 f911 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dd6:	2330      	movs	r3, #48	; 0x30
 8000dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0x90>)
 8000dee:	f001 f903 	bl	8001ff8 <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40010800 	.word	0x40010800

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fba8 	bl	8001560 <HAL_Init>

  /* USER CODE BEGIN Init */
	BSP_SR501_EXTI_Config();
 8000e10:	f7ff ff4e 	bl	8000cb0 <BSP_SR501_EXTI_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f84c 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f7ff ffaa 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1c:	f7ff ff82 	bl	8000d24 <MX_DMA_Init>
  MX_TIM4_Init();
 8000e20:	f000 f9ce 	bl	80011c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e24:	f000 fa40 	bl	80012a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 fa68 	bl	80012fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//清楚定时器初始化过程中的更新中断标志
	__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <main+0x94>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f06f 0201 	mvn.w	r2, #1
 8000e34:	611a      	str	r2, [r3, #16]
	//使能定时�???4更新中断并启动定时器
	HAL_TIM_Base_Start_IT(&htim4);
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <main+0x94>)
 8000e38:	f001 fed7 	bl	8002bea <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    if (isStart == 0)
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <main+0x98>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d029      	beq.n	8000e98 <main+0x90>
		{

		continue;
		}
		else if (isStart == 1)
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <main+0x98>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d115      	bne.n	8000e78 <main+0x70>
		{
			BSP_KEY_Config();
 8000e4c:	f7ff fc12 	bl	8000674 <BSP_KEY_Config>
			BSP_LED_Config();
 8000e50:	f7ff fc90 	bl	8000774 <BSP_LED_Config>
			BSP_OLED_Config();
 8000e54:	f7ff fe48 	bl	8000ae8 <BSP_OLED_Config>
			BSP_DS18B20_Config();
 8000e58:	f7ff fa84 	bl	8000364 <BSP_DS18B20_Config>
			BSP_BEEP_Config();
 8000e5c:	f7ff fa58 	bl	8000310 <BSP_BEEP_Config>
			BSP_LED_Off(LED0);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fc95 	bl	8000790 <BSP_LED_Off>
			BSP_LED_Off(LED1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fc92 	bl	8000790 <BSP_LED_Off>
			BSP_LED_Off(LED2);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fc8f 	bl	8000790 <BSP_LED_Off>
			BSP_OLED_CLS();
 8000e72:	f7ff feb3 	bl	8000bdc <BSP_OLED_CLS>
 8000e76:	e7e1      	b.n	8000e3c <main+0x34>
//				BSP_LED_Off(LED1);
//				BSP_BEEP_StartRing();
//				break;
//			}

			BSP_CO2_Tx(&co2);
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <main+0x9c>)
 8000e7a:	f7ff fca3 	bl	80007c4 <BSP_CO2_Tx>
		sprintf((char*) dis_buf, "%u", co2);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <main+0x9c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <main+0xa0>)
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <main+0xa4>)
 8000e88:	f002 ff34 	bl	8003cf4 <siprintf>
		BSP_OLED_Big_Str(0, 0, dis_buf);
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <main+0xa4>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff feab 	bl	8000bec <BSP_OLED_Big_Str>
 8000e96:	e7d1      	b.n	8000e3c <main+0x34>
		continue;
 8000e98:	bf00      	nop
	    if (isStart == 0)
 8000e9a:	e7cf      	b.n	8000e3c <main+0x34>
 8000e9c:	200004e8 	.word	0x200004e8
 8000ea0:	200000d1 	.word	0x200000d1
 8000ea4:	200004da 	.word	0x200004da
 8000ea8:	08004530 	.word	0x08004530
 8000eac:	200000d8 	.word	0x200000d8

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	; 0x40
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 ff10 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fa2f 	bl	800235c <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f04:	f000 f860 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc9a 	bl	800285c <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f2e:	f000 f84b 	bl	8000fc8 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3740      	adds	r7, #64	; 0x40
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
if (htim->Instance == TIM4)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d11d      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x4e>
{
	if (temperature < 29.0f)
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4912      	ldr	r1, [pc, #72]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f9b3 	bl	80002c0 <__aeabi_fcmplt>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		state = SAFE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
	else
	{
		state = DANGER;
	}
}
}
 8000f66:	e010      	b.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if (temperature < 32.0f)
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f9a5 	bl	80002c0 <__aeabi_fcmplt>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x48>
		state = RISK;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
}
 8000f82:	e002      	b.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		state = DANGER;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40000800 	.word	0x40000800
 8000f98:	200000d4 	.word	0x200000d4
 8000f9c:	41e80000 	.word	0x41e80000
 8000fa0:	200004d8 	.word	0x200004d8

08000fa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
isStart++;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000fb8:	701a      	strb	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000d1 	.word	0x200000d1

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_MspInit+0x5c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_MspInit+0x5c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x5c>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_MspInit+0x5c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_MspInit+0x60>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_MspInit+0x60>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <HardFault_Handler+0x4>

0800104a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <BusFault_Handler+0x4>

08001056 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 fab2 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA1_Channel4_IRQHandler+0x10>)
 8001092:	f000 fd75 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000528 	.word	0x20000528

080010a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA1_Channel5_IRQHandler+0x10>)
 80010a6:	f000 fd6b 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000056c 	.word	0x2000056c

080010b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM4_IRQHandler+0x10>)
 80010ba:	f001 fdb9 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200004e8 	.word	0x200004e8

080010c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <USART1_IRQHandler+0x10>)
 80010ce:	f002 fa85 	bl	80035dc <HAL_UART_IRQHandler>
//  {
//	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);//清除IDLE中断标志
//	  HAL_UART_IdleCpltCallback(&huart1);//用户编写的IDLE中断回调函数
//  }
  /* USER CODE END USART1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200005b0 	.word	0x200005b0

080010dc <EXTI9_5_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010e4:	f001 f922 	bl	800232c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_sbrk>:
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;

 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	return (caddr_t) prev_heap_end;
}

 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
 800111c:	f002 fdb8 	bl	8003c90 <__errno>
 8001120:	4602      	mov	r2, r0
 8001122:	230c      	movs	r3, #12
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20010000 	.word	0x20010000
 800114c:	00000400 	.word	0x00000400
 8001150:	200004dc 	.word	0x200004dc
 8001154:	20000638 	.word	0x20000638

08001158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <SystemInit+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <SystemInit+0x5c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <SystemInit+0x5c>)
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4911      	ldr	r1, [pc, #68]	; (80011b4 <SystemInit+0x5c>)
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <SystemInit+0x60>)
 8001170:	4013      	ands	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <SystemInit+0x5c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <SystemInit+0x5c>)
 800117a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <SystemInit+0x5c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SystemInit+0x5c>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SystemInit+0x5c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SystemInit+0x5c>)
 8001196:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800119a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SystemInit+0x5c>)
 800119e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SystemInit+0x64>)
 80011a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000
 80011b8:	f8ff0000 	.word	0xf8ff0000
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM4_Init+0x94>)
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_TIM4_Init+0x98>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM4_Init+0x94>)
 80011e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM4_Init+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM4_Init+0x94>)
 80011f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_TIM4_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM4_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_TIM4_Init+0x94>)
 8001206:	f001 fcc5 	bl	8002b94 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001210:	f7ff feda 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM4_Init+0x94>)
 8001222:	f001 fe0d 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800122c:	f7ff fecc 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM4_Init+0x94>)
 800123e:	f001 ffeb 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001248:	f7ff febe 	bl	8000fc8 <Error_Handler>
  }

}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200004e8 	.word	0x200004e8
 8001258:	40000800 	.word	0x40000800

0800125c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d113      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <HAL_TIM_Base_MspInit+0x48>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_TIM_Base_MspInit+0x48>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201e      	movs	r0, #30
 800128c:	f000 fac3 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001290:	201e      	movs	r0, #30
 8001292:	f000 fadc 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40000800 	.word	0x40000800
 80012a4:	40021000 	.word	0x40021000

080012a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART1_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012e0:	f001 fff0 	bl	80032c4 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f7ff fe6d 	bl	8000fc8 <Error_Handler>
  }

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200005b0 	.word	0x200005b0
 80012f8:	40013800 	.word	0x40013800

080012fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f001 ffc6 	bl	80032c4 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f7ff fe43 	bl	8000fc8 <Error_Handler>
  }

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200005f0 	.word	0x200005f0
 800134c:	40004400 	.word	0x40004400

08001350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a62      	ldr	r2, [pc, #392]	; (80014f4 <HAL_UART_MspInit+0x1a4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f040 8087 	bne.w	8001480 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001372:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a60      	ldr	r2, [pc, #384]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4851      	ldr	r0, [pc, #324]	; (80014fc <HAL_UART_MspInit+0x1ac>)
 80013b8:	f000 fe1e 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	4619      	mov	r1, r3
 80013d0:	484a      	ldr	r0, [pc, #296]	; (80014fc <HAL_UART_MspInit+0x1ac>)
 80013d2:	f000 fe11 	bl	8001ff8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_UART_MspInit+0x1b4>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001406:	483e      	ldr	r0, [pc, #248]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001408:	f000 fa3c 	bl	8001884 <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001412:	f7ff fdd9 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a39      	ldr	r2, [pc, #228]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
 800141c:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001424:	4a39      	ldr	r2, [pc, #228]	; (800150c <HAL_UART_MspInit+0x1bc>)
 8001426:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 800142a:	2210      	movs	r2, #16
 800142c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001454:	f000 fa16 	bl	8001884 <HAL_DMA_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800145e:	f7ff fdb3 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a28      	ldr	r2, [pc, #160]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2025      	movs	r0, #37	; 0x25
 8001474:	f000 f9cf 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001478:	2025      	movs	r0, #37	; 0x25
 800147a:	f000 f9e8 	bl	800184e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800147e:	e034      	b.n	80014ea <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12f      	bne.n	80014ea <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ba:	2304      	movs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <HAL_UART_MspInit+0x1ac>)
 80014ce:	f000 fd93 	bl	8001ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d2:	2308      	movs	r3, #8
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_UART_MspInit+0x1ac>)
 80014e6:	f000 fd87 	bl	8001ff8 <HAL_GPIO_Init>
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800
 8001500:	2000056c 	.word	0x2000056c
 8001504:	40020058 	.word	0x40020058
 8001508:	20000528 	.word	0x20000528
 800150c:	40020044 	.word	0x40020044
 8001510:	40004400 	.word	0x40004400

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001514:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001516:	e003      	b.n	8001520 <LoopCopyDataInit>

08001518 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800151a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800151c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800151e:	3104      	adds	r1, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001524:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001526:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001528:	d3f6      	bcc.n	8001518 <CopyDataInit>
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800152c:	e002      	b.n	8001534 <LoopFillZerobss>

0800152e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001530:	f842 3b04 	str.w	r3, [r2], #4

08001534 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001538:	d3f9      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153a:	f7ff fe0d 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f002 fbad 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fc61 	bl	8000e08 <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r3, =_sidata
 8001548:	08004ba4 	.word	0x08004ba4
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001550:	200000ac 	.word	0x200000ac
  ldr r2, =_sbss
 8001554:	200000ac 	.word	0x200000ac
  ldr r3, = _ebss
 8001558:	20000638 	.word	0x20000638

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f945 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fd2a 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f95d 	bl	800186a <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f925 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000003c 	.word	0x2000003c
 80015e4:	20000044 	.word	0x20000044
 80015e8:	20000040 	.word	0x20000040

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000044 	.word	0x20000044
 800160c:	20000630 	.word	0x20000630

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000630 	.word	0x20000630

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff0 	bl	8001610 <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_Delay+0x40>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffe0 	bl	8001610 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000044 	.word	0x20000044

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <__NVIC_EnableIRQ+0x34>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff90 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff2d 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff42 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff35 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa2 	bl	80017bc <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e059      	b.n	800194e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_DMA_Init+0xd4>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d80f      	bhi.n	80018c6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_DMA_Init+0xd8>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HAL_DMA_Init+0xdc>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_DMA_Init+0xe0>)
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c4:	e00e      	b.n	80018e4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_DMA_Init+0xe4>)
 80018ce:	4413      	add	r3, r2
 80018d0:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_DMA_Init+0xdc>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	009a      	lsls	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <HAL_DMA_Init+0xe8>)
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40020407 	.word	0x40020407
 800195c:	bffdfff8 	.word	0xbffdfff8
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	40020000 	.word	0x40020000
 8001968:	bffdfbf8 	.word	0xbffdfbf8
 800196c:	40020400 	.word	0x40020400

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001982:	2b02      	cmp	r3, #2
 8001984:	d005      	beq.n	8001992 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e0d6      	b.n	8001b40 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <HAL_DMA_Abort_IT+0x1dc>)
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d958      	bls.n	8001a70 <HAL_DMA_Abort_IT+0x100>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a63      	ldr	r2, [pc, #396]	; (8001b50 <HAL_DMA_Abort_IT+0x1e0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04f      	beq.n	8001a68 <HAL_DMA_Abort_IT+0xf8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <HAL_DMA_Abort_IT+0x1e4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d048      	beq.n	8001a64 <HAL_DMA_Abort_IT+0xf4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <HAL_DMA_Abort_IT+0x1e8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d040      	beq.n	8001a5e <HAL_DMA_Abort_IT+0xee>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <HAL_DMA_Abort_IT+0x1ec>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d038      	beq.n	8001a58 <HAL_DMA_Abort_IT+0xe8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5d      	ldr	r2, [pc, #372]	; (8001b60 <HAL_DMA_Abort_IT+0x1f0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d030      	beq.n	8001a52 <HAL_DMA_Abort_IT+0xe2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5b      	ldr	r2, [pc, #364]	; (8001b64 <HAL_DMA_Abort_IT+0x1f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d028      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xdc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a53      	ldr	r2, [pc, #332]	; (8001b4c <HAL_DMA_Abort_IT+0x1dc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d020      	beq.n	8001a46 <HAL_DMA_Abort_IT+0xd6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_DMA_Abort_IT+0x1f8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_DMA_Abort_IT+0xd2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_DMA_Abort_IT+0x1fc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_Abort_IT+0xce>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a54      	ldr	r2, [pc, #336]	; (8001b70 <HAL_DMA_Abort_IT+0x200>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00a      	beq.n	8001a38 <HAL_DMA_Abort_IT+0xc8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <HAL_DMA_Abort_IT+0x204>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <HAL_DMA_Abort_IT+0xc2>
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	e01b      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a36:	e018      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	e015      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a3e:	2310      	movs	r3, #16
 8001a40:	e013      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e011      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a4a:	e00e      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a50:	e00b      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a56:	e008      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	e005      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	e002      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a64:	2310      	movs	r3, #16
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_Abort_IT+0xfa>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4a43      	ldr	r2, [pc, #268]	; (8001b78 <HAL_DMA_Abort_IT+0x208>)
 8001a6c:	6053      	str	r3, [r2, #4]
 8001a6e:	e057      	b.n	8001b20 <HAL_DMA_Abort_IT+0x1b0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <HAL_DMA_Abort_IT+0x1e0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d04f      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x1aa>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <HAL_DMA_Abort_IT+0x1e4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d048      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x1a6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_DMA_Abort_IT+0x1e8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d040      	beq.n	8001b10 <HAL_DMA_Abort_IT+0x1a0>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <HAL_DMA_Abort_IT+0x1ec>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d038      	beq.n	8001b0a <HAL_DMA_Abort_IT+0x19a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_DMA_Abort_IT+0x1f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d030      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x194>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <HAL_DMA_Abort_IT+0x1f4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d028      	beq.n	8001afe <HAL_DMA_Abort_IT+0x18e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_DMA_Abort_IT+0x1dc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d020      	beq.n	8001af8 <HAL_DMA_Abort_IT+0x188>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_DMA_Abort_IT+0x1f8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d019      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x184>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_DMA_Abort_IT+0x1fc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_Abort_IT+0x180>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_DMA_Abort_IT+0x200>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00a      	beq.n	8001aea <HAL_DMA_Abort_IT+0x17a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_DMA_Abort_IT+0x204>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d102      	bne.n	8001ae4 <HAL_DMA_Abort_IT+0x174>
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	e01b      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae8:	e018      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aee:	e015      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001af0:	2310      	movs	r3, #16
 8001af2:	e013      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e011      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afc:	e00e      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001afe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b02:	e00b      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	e008      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	e005      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	e002      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001b16:	2310      	movs	r3, #16
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_Abort_IT+0x1ac>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_DMA_Abort_IT+0x20c>)
 8001b1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
    } 
  }
  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40020080 	.word	0x40020080
 8001b50:	40020008 	.word	0x40020008
 8001b54:	4002001c 	.word	0x4002001c
 8001b58:	40020030 	.word	0x40020030
 8001b5c:	40020044 	.word	0x40020044
 8001b60:	40020058 	.word	0x40020058
 8001b64:	4002006c 	.word	0x4002006c
 8001b68:	40020408 	.word	0x40020408
 8001b6c:	4002041c 	.word	0x4002041c
 8001b70:	40020430 	.word	0x40020430
 8001b74:	40020444 	.word	0x40020444
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80d6 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x1d6>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80d0 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <HAL_DMA_IRQHandler+0x2c8>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d958      	bls.n	8001c92 <HAL_DMA_IRQHandler+0x112>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a99      	ldr	r2, [pc, #612]	; (8001e4c <HAL_DMA_IRQHandler+0x2cc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d04f      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x10a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a98      	ldr	r2, [pc, #608]	; (8001e50 <HAL_DMA_IRQHandler+0x2d0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d048      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x106>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a96      	ldr	r2, [pc, #600]	; (8001e54 <HAL_DMA_IRQHandler+0x2d4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d040      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x100>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a95      	ldr	r2, [pc, #596]	; (8001e58 <HAL_DMA_IRQHandler+0x2d8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d038      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xfa>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a93      	ldr	r2, [pc, #588]	; (8001e5c <HAL_DMA_IRQHandler+0x2dc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d030      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xf4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a92      	ldr	r2, [pc, #584]	; (8001e60 <HAL_DMA_IRQHandler+0x2e0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d028      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xee>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a89      	ldr	r2, [pc, #548]	; (8001e48 <HAL_DMA_IRQHandler+0x2c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d020      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xe8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a8e      	ldr	r2, [pc, #568]	; (8001e64 <HAL_DMA_IRQHandler+0x2e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d019      	beq.n	8001c64 <HAL_DMA_IRQHandler+0xe4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a8c      	ldr	r2, [pc, #560]	; (8001e68 <HAL_DMA_IRQHandler+0x2e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d012      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xe0>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a8b      	ldr	r2, [pc, #556]	; (8001e6c <HAL_DMA_IRQHandler+0x2ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00a      	beq.n	8001c5a <HAL_DMA_IRQHandler+0xda>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a89      	ldr	r2, [pc, #548]	; (8001e70 <HAL_DMA_IRQHandler+0x2f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d102      	bne.n	8001c54 <HAL_DMA_IRQHandler+0xd4>
 8001c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c52:	e01b      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c58:	e018      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5e:	e015      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c60:	2340      	movs	r3, #64	; 0x40
 8001c62:	e013      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e011      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c6c:	e00e      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c72:	e00b      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c78:	e008      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7e:	e005      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c84:	e002      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	e000      	b.n	8001c8c <HAL_DMA_IRQHandler+0x10c>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <HAL_DMA_IRQHandler+0x2f4>)
 8001c8e:	6053      	str	r3, [r2, #4]
 8001c90:	e057      	b.n	8001d42 <HAL_DMA_IRQHandler+0x1c2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_DMA_IRQHandler+0x2cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04f      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x1bc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <HAL_DMA_IRQHandler+0x2d0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d048      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x1b8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_DMA_IRQHandler+0x2d4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x1b2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	; (8001e58 <HAL_DMA_IRQHandler+0x2d8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d038      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1ac>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a67      	ldr	r2, [pc, #412]	; (8001e5c <HAL_DMA_IRQHandler+0x2dc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d030      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x1a6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <HAL_DMA_IRQHandler+0x2e0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d028      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x1a0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_DMA_IRQHandler+0x2c8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d020      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x19a>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a61      	ldr	r2, [pc, #388]	; (8001e64 <HAL_DMA_IRQHandler+0x2e4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x196>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a60      	ldr	r2, [pc, #384]	; (8001e68 <HAL_DMA_IRQHandler+0x2e8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d012      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x192>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5e      	ldr	r2, [pc, #376]	; (8001e6c <HAL_DMA_IRQHandler+0x2ec>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00a      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x18c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <HAL_DMA_IRQHandler+0x2f0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x186>
 8001d00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d04:	e01b      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d0a:	e018      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d10:	e015      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d12:	2340      	movs	r3, #64	; 0x40
 8001d14:	e013      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e011      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d1e:	e00e      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d24:	e00b      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d2a:	e008      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d30:	e005      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	e002      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d38:	2340      	movs	r3, #64	; 0x40
 8001d3a:	e000      	b.n	8001d3e <HAL_DMA_IRQHandler+0x1be>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_DMA_IRQHandler+0x2f8>)
 8001d40:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8136 	beq.w	8001fb8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d54:	e130      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80f8 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x3d8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80f2 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020a 	bic.w	r2, r2, #10
 8001d90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_DMA_IRQHandler+0x2c8>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d973      	bls.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_IRQHandler+0x2cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d06a      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x306>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_DMA_IRQHandler+0x2d0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d063      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x302>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_IRQHandler+0x2d4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d05b      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2fc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_DMA_IRQHandler+0x2d8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d038      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x2c0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_IRQHandler+0x2dc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d030      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x2ba>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_DMA_IRQHandler+0x2e0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d028      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x2b4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_DMA_IRQHandler+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d020      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x2ae>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_DMA_IRQHandler+0x2e4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x2aa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_DMA_IRQHandler+0x2e8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2a6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_DMA_IRQHandler+0x2ec>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <HAL_DMA_IRQHandler+0x2f0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d102      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x29a>
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	e036      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1e:	e033      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	e030      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e26:	2320      	movs	r3, #32
 8001e28:	e02e      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e02c      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e32:	e029      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e38:	e026      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3e:	e023      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e44:	e020      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e46:	bf00      	nop
 8001e48:	40020080 	.word	0x40020080
 8001e4c:	40020008 	.word	0x40020008
 8001e50:	4002001c 	.word	0x4002001c
 8001e54:	40020030 	.word	0x40020030
 8001e58:	40020044 	.word	0x40020044
 8001e5c:	40020058 	.word	0x40020058
 8001e60:	4002006c 	.word	0x4002006c
 8001e64:	40020408 	.word	0x40020408
 8001e68:	4002041c 	.word	0x4002041c
 8001e6c:	40020430 	.word	0x40020430
 8001e70:	40020444 	.word	0x40020444
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	e002      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e82:	2320      	movs	r3, #32
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_IRQHandler+0x308>
 8001e86:	2302      	movs	r3, #2
 8001e88:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <HAL_DMA_IRQHandler+0x444>)
 8001e8a:	6053      	str	r3, [r2, #4]
 8001e8c:	e057      	b.n	8001f3e <HAL_DMA_IRQHandler+0x3be>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_DMA_IRQHandler+0x448>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04f      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x3b8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	; (8001fcc <HAL_DMA_IRQHandler+0x44c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d048      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x3b4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <HAL_DMA_IRQHandler+0x450>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x3ae>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_DMA_IRQHandler+0x454>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d038      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x3a8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_DMA_IRQHandler+0x458>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d030      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x3a2>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_DMA_IRQHandler+0x45c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d028      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x39c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a44      	ldr	r2, [pc, #272]	; (8001fe0 <HAL_DMA_IRQHandler+0x460>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d020      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x396>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <HAL_DMA_IRQHandler+0x464>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x392>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <HAL_DMA_IRQHandler+0x468>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d012      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x38e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_DMA_IRQHandler+0x46c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00a      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x388>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <HAL_DMA_IRQHandler+0x470>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x382>
 8001efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f00:	e01b      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f06:	e018      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f0c:	e015      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e013      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e011      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1a:	e00e      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f20:	e00b      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f26:	e008      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f32:	e002      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f34:	2320      	movs	r3, #32
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_IRQHandler+0x3ba>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_DMA_IRQHandler+0x474>)
 8001f3c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d034      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f56:	e02f      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d028      	beq.n	8001fba <HAL_DMA_IRQHandler+0x43a>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d023      	beq.n	8001fba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 020e 	bic.w	r2, r2, #14
 8001f80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
    }
  }
  return;
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
}
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020008 	.word	0x40020008
 8001fcc:	4002001c 	.word	0x4002001c
 8001fd0:	40020030 	.word	0x40020030
 8001fd4:	40020044 	.word	0x40020044
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	4002006c 	.word	0x4002006c
 8001fe0:	40020080 	.word	0x40020080
 8001fe4:	40020408 	.word	0x40020408
 8001fe8:	4002041c 	.word	0x4002041c
 8001fec:	40020430 	.word	0x40020430
 8001ff0:	40020444 	.word	0x40020444
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e133      	b.n	8002274 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200c:	2201      	movs	r2, #1
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8122 	bne.w	800226e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d034      	beq.n	800209c <HAL_GPIO_Init+0xa4>
 8002032:	2b12      	cmp	r3, #18
 8002034:	d80d      	bhi.n	8002052 <HAL_GPIO_Init+0x5a>
 8002036:	2b02      	cmp	r3, #2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x9a>
 800203a:	2b02      	cmp	r3, #2
 800203c:	d804      	bhi.n	8002048 <HAL_GPIO_Init+0x50>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d031      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
 8002042:	2b01      	cmp	r3, #1
 8002044:	d01c      	beq.n	8002080 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002046:	e048      	b.n	80020da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002048:	2b03      	cmp	r3, #3
 800204a:	d043      	beq.n	80020d4 <HAL_GPIO_Init+0xdc>
 800204c:	2b11      	cmp	r3, #17
 800204e:	d01b      	beq.n	8002088 <HAL_GPIO_Init+0x90>
          break;
 8002050:	e043      	b.n	80020da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002052:	4a8f      	ldr	r2, [pc, #572]	; (8002290 <HAL_GPIO_Init+0x298>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d026      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
 8002058:	4a8d      	ldr	r2, [pc, #564]	; (8002290 <HAL_GPIO_Init+0x298>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d806      	bhi.n	800206c <HAL_GPIO_Init+0x74>
 800205e:	4a8d      	ldr	r2, [pc, #564]	; (8002294 <HAL_GPIO_Init+0x29c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d020      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
 8002064:	4a8c      	ldr	r2, [pc, #560]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01d      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
          break;
 800206a:	e036      	b.n	80020da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800206c:	4a8b      	ldr	r2, [pc, #556]	; (800229c <HAL_GPIO_Init+0x2a4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
 8002072:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d016      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
 8002078:	4a8a      	ldr	r2, [pc, #552]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0xae>
          break;
 800207e:	e02c      	b.n	80020da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e028      	b.n	80020da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	3304      	adds	r3, #4
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e023      	b.n	80020da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	3308      	adds	r3, #8
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e01e      	b.n	80020da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	330c      	adds	r3, #12
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e019      	b.n	80020da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ae:	2304      	movs	r3, #4
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e012      	b.n	80020da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	611a      	str	r2, [r3, #16]
          break;
 80020c6:	e008      	b.n	80020da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	615a      	str	r2, [r3, #20]
          break;
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2bff      	cmp	r3, #255	; 0xff
 80020de:	d801      	bhi.n	80020e4 <HAL_GPIO_Init+0xec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	e001      	b.n	80020e8 <HAL_GPIO_Init+0xf0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2bff      	cmp	r3, #255	; 0xff
 80020ee:	d802      	bhi.n	80020f6 <HAL_GPIO_Init+0xfe>
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x104>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3b08      	subs	r3, #8
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	210f      	movs	r1, #15
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	6a39      	ldr	r1, [r7, #32]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	431a      	orrs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a2 	beq.w	800226e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6193      	str	r3, [r2, #24]
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x1b6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x1b2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x2c0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x1ae>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x2c4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x1aa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x1a6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x1a2>
 8002196:	2305      	movs	r3, #5
 8002198:	e00a      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 800219a:	2306      	movs	r3, #6
 800219c:	e008      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 800219e:	2304      	movs	r3, #4
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e004      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x1b8>
 80021ae:	2300      	movs	r3, #0
 80021b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b2:	f002 0203 	and.w	r2, r2, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4093      	lsls	r3, r2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021c0:	493a      	ldr	r1, [pc, #232]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	493a      	ldr	r1, [pc, #232]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4930      	ldr	r1, [pc, #192]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
 800220e:	e006      	b.n	800221e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	43db      	mvns	r3, r3
 8002218:	492b      	ldr	r1, [pc, #172]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800221a:	4013      	ands	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	4926      	ldr	r1, [pc, #152]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4921      	ldr	r1, [pc, #132]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002242:	4013      	ands	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	491c      	ldr	r1, [pc, #112]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	60cb      	str	r3, [r1, #12]
 800225e:	e006      	b.n	800226e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800226a:	4013      	ands	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f aec4 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 8002284:	bf00      	nop
 8002286:	372c      	adds	r7, #44	; 0x2c
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	10210000 	.word	0x10210000
 8002294:	10110000 	.word	0x10110000
 8002298:	10120000 	.word	0x10120000
 800229c:	10310000 	.word	0x10310000
 80022a0:	10320000 	.word	0x10320000
 80022a4:	10220000 	.word	0x10220000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	40011800 	.word	0x40011800
 80022c4:	40011c00 	.word	0x40011c00
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]
 8002306:	4613      	mov	r3, r2
 8002308:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800230a:	787b      	ldrb	r3, [r7, #1]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002316:	e003      	b.n	8002320 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	611a      	str	r2, [r3, #16]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
	...

0800232c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fe2a 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e26c      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <HAL_RCC_OscConfig+0x12c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d168      	bne.n	8002488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e246      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76>
 80023c4:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0xbc>
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 8002418:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff f8ea 	bl	8001610 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f8e6 	bl	8001610 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1fa      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xe4>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff f8d6 	bl	8001610 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f8d2 	bl	8001610 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1e6      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x10c>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
 80024ae:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1ba      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff f88b 	bl	8001610 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff f887 	bl	8001610 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e19b      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f86a 	bl	8001610 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff f866 	bl	8001610 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e17a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03a      	beq.n	80025e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff f84a 	bl	8001610 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff f846 	bl	8001610 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e15a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 fada 	bl	8002b58 <RCC_Delay>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7ff f830 	bl	8001610 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff f82c 	bl	8001610 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e140      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a6 	beq.w	800273a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b97      	ldr	r3, [pc, #604]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a93      	ldr	r2, [pc, #588]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b8e      	ldr	r3, [pc, #568]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7fe ffed 	bl	8001610 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe ffe9 	bl	8001610 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0fd      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e02d      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x334>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x356>
 8002698:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe ff9d 	bl	8001610 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe ff99 	bl	8001610 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0ab      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x37e>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff87 	bl	8001610 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe ff83 	bl	8001610 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e095      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8081 	beq.w	8002846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d061      	beq.n	8002814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe ff57 	bl	8001610 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe ff53 	bl	8001610 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e067      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	492d      	ldr	r1, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a19      	ldr	r1, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	430b      	orrs	r3, r1
 80027b2:	4927      	ldr	r1, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe ff27 	bl	8001610 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe ff23 	bl	8001610 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e037      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
 80027e4:	e02f      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff10 	bl	8001610 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff0c 	bl	8001610 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e020      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x498>
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e013      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420060 	.word	0x42420060

0800285c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d0      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4965      	ldr	r1, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d040      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d115      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e073      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4936      	ldr	r1, [pc, #216]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe fe60 	bl	8001610 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fe5c 	bl	8001610 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e053      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d210      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4922      	ldr	r1, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4601      	mov	r1, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1cc>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fdbe 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08004b50 	.word	0x08004b50
 8002a28:	2000003c 	.word	0x2000003c
 8002a2c:	20000040 	.word	0x20000040

08002a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b490      	push	{r4, r7}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a38:	1d3c      	adds	r4, r7, #4
 8002a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6e:	e02d      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a72:	623b      	str	r3, [r7, #32]
      break;
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	0c9b      	lsrs	r3, r3, #18
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c5b      	lsrs	r3, r3, #17
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aae:	fb02 f203 	mul.w	r2, r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	623b      	str	r3, [r7, #32]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ace:	623b      	str	r3, [r7, #32]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc90      	pop	{r4, r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	08004534 	.word	0x08004534
 8002ae4:	08004544 	.word	0x08004544
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	2000003c 	.word	0x2000003c

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08004b60 	.word	0x08004b60

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffde 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08004b60 	.word	0x08004b60

08002b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RCC_Delay+0x34>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <RCC_Delay+0x38>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b74:	bf00      	nop
  }
  while (Delay --);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <RCC_Delay+0x1c>
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000003c 	.word	0x2000003c
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e01d      	b.n	8002be2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fb4e 	bl	800125c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 fa10 	bl	8002ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d007      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f9a4 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f997 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9a6 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0204 	mvn.w	r2, #4
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f97a 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f96d 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f97c 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0208 	mvn.w	r2, #8
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f950 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f943 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f952 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f926 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f919 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f928 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f8c4 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa69 	bl	80032b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8ec 	bl	8002fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0220 	mvn.w	r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa34 	bl	80032a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0a6      	b.n	8002fa6 <HAL_TIM_ConfigClockSource+0x166>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d067      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0x120>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d80b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x6c>
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d073      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x62>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d06f      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ea0:	e078      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d06c      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
 8002ea6:	2b30      	cmp	r3, #48	; 0x30
 8002ea8:	d06a      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002eaa:	e073      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d00d      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0x8c>
 8002eb0:	2b70      	cmp	r3, #112	; 0x70
 8002eb2:	d804      	bhi.n	8002ebe <HAL_TIM_ConfigClockSource+0x7e>
 8002eb4:	2b50      	cmp	r3, #80	; 0x50
 8002eb6:	d033      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xe0>
 8002eb8:	2b60      	cmp	r3, #96	; 0x60
 8002eba:	d041      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ebc:	e06a      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d066      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x152>
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d017      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002eca:	e063      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 f97d 	bl	80031da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
      break;
 8002ef8:	e04c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f000 f966 	bl	80031da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e039      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 f8dd 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2150      	movs	r1, #80	; 0x50
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f934 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e029      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f000 f8fb 	bl	8003148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2160      	movs	r1, #96	; 0x60
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f924 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f5e:	e019      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f000 f8bd 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f914 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e009      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 f90b 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f90:	e000      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
	...

08002ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <TIM_Base_SetConfig+0xe0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a32      	ldr	r2, [pc, #200]	; (80030dc <TIM_Base_SetConfig+0xe4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00f      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301e:	d00b      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <TIM_Base_SetConfig+0xe8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <TIM_Base_SetConfig+0xec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <TIM_Base_SetConfig+0xf0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <TIM_Base_SetConfig+0xe0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <TIM_Base_SetConfig+0x82>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <TIM_Base_SetConfig+0xe4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_Base_SetConfig+0x82>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d00b      	beq.n	800307a <TIM_Base_SetConfig+0x82>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <TIM_Base_SetConfig+0xe8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0x82>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <TIM_Base_SetConfig+0xec>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0x82>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <TIM_Base_SetConfig+0xf0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <TIM_Base_SetConfig+0xe0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0xc8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <TIM_Base_SetConfig+0xe4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d103      	bne.n	80030c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40013400 	.word	0x40013400
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0201 	bic.w	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 030a 	bic.w	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 0210 	bic.w	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 0307 	orr.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031da:	b480      	push	{r7}
 80031dc:	b087      	sub	sp, #28
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	021a      	lsls	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e032      	b.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003268:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4313      	orrs	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03f      	b.n	8003356 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe f830 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fbe7 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b088      	sub	sp, #32
 8003362:	af02      	add	r7, sp, #8
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 8083 	bne.w	8003486 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_UART_Transmit+0x2e>
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e07b      	b.n	8003488 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_UART_Transmit+0x40>
 800339a:	2302      	movs	r3, #2
 800339c:	e074      	b.n	8003488 <HAL_UART_Transmit+0x12a>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2221      	movs	r2, #33	; 0x21
 80033b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033b4:	f7fe f92c 	bl	8001610 <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033c6:	e042      	b.n	800344e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d122      	bne.n	8003426 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa0d 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e046      	b.n	8003488 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3302      	adds	r3, #2
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	e017      	b.n	800344e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	e013      	b.n	800344e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9ea 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e023      	b.n	8003488 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	60ba      	str	r2, [r7, #8]
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1b7      	bne.n	80033c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	2140      	movs	r1, #64	; 0x40
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f9d1 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e00a      	b.n	8003488 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	f040 8090 	bne.w	80035d2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_UART_Receive+0x2e>
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e088      	b.n	80035d4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Receive+0x40>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e081      	b.n	80035d4 <HAL_UART_Receive+0x144>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	; 0x22
 80034e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034e6:	f7fe f893 	bl	8001610 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034f8:	e05c      	b.n	80035b4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d12b      	bne.n	800356a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2120      	movs	r1, #32
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f974 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e053      	b.n	80035d4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10c      	bne.n	8003552 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	b29a      	uxth	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3302      	adds	r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e030      	b.n	80035b4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	b29a      	uxth	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3301      	adds	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	e024      	b.n	80035b4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2120      	movs	r1, #32
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f948 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e027      	b.n	80035d4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	60ba      	str	r2, [r7, #8]
 8003598:	b2ca      	uxtb	r2, r1
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e00a      	b.n	80035b4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c59      	adds	r1, r3, #1
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d19d      	bne.n	80034fa <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_UART_IRQHandler+0x52>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9d7 	bl	80039da <UART_Receive_IT>
      return;
 800362c:	e0cc      	b.n	80037c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80ab 	beq.w	800378c <HAL_UART_IRQHandler+0x1b0>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_UART_IRQHandler+0x70>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a0 	beq.w	800378c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_UART_IRQHandler+0x90>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_UART_IRQHandler+0xb0>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	f043 0202 	orr.w	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_UART_IRQHandler+0xd0>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_UART_IRQHandler+0xf0>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	f043 0208 	orr.w	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d078      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_UART_IRQHandler+0x112>
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f976 	bl	80039da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <HAL_UART_IRQHandler+0x13a>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d031      	beq.n	800377a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f8c1 	bl	800389e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d023      	beq.n	8003772 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003738:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	2b00      	cmp	r3, #0
 8003740:	d013      	beq.n	800376a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_UART_IRQHandler+0x1f4>)
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f90e 	bl	8001970 <HAL_DMA_Abort_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00e      	b.n	8003788 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f844 	bl	80037f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00a      	b.n	8003788 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f840 	bl	80037f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e006      	b.n	8003788 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f83c 	bl	80037f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003786:	e01e      	b.n	80037c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	bf00      	nop
    return;
 800378a:	e01c      	b.n	80037c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1cc>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8ad 	bl	8003900 <UART_Transmit_IT>
    return;
 80037a6:	e00f      	b.n	80037c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_UART_IRQHandler+0x1ec>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8f4 	bl	80039aa <UART_EndTransmit_IT>
    return;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80037c6:	bf00      	nop
  }
}
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	080038d9 	.word	0x080038d9

080037d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	e02c      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d028      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x30>
 800382a:	f7fd fef1 	bl	8001610 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	d21d      	bcs.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003848:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d0c3      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff80 	bl	80037f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b21      	cmp	r3, #33	; 0x21
 8003912:	d144      	bne.n	800399e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d11a      	bne.n	8003954 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003932:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]
 8003946:	e00e      	b.n	8003966 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]
 8003952:	e008      	b.n	8003966 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6211      	str	r1, [r2, #32]
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4619      	mov	r1, r3
 8003974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff02 	bl	80037d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b22      	cmp	r3, #34	; 0x22
 80039ec:	d171      	bne.n	8003ad2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d123      	bne.n	8003a40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
 8003a22:	e029      	b.n	8003a78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a3e:	e01b      	b.n	8003a78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6858      	ldr	r0, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6291      	str	r1, [r2, #40]	; 0x28
 8003a58:	b2c2      	uxtb	r2, r0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e00c      	b.n	8003a78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	1c58      	adds	r0, r3, #1
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6288      	str	r0, [r1, #40]	; 0x28
 8003a70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d120      	bne.n	8003ace <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0220 	bic.w	r2, r2, #32
 8003a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fe8e 	bl	80037e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e002      	b.n	8003ad4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b16:	f023 030c 	bic.w	r3, r3, #12
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a52      	ldr	r2, [pc, #328]	; (8003c88 <UART_SetConfig+0x1ac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d14e      	bne.n	8003be2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fff4 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8003b48:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	0119      	lsls	r1, r3, #4
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003b82:	fba3 0302 	umull	r0, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2064      	movs	r0, #100	; 0x64
 8003b8a:	fb00 f303 	mul.w	r3, r0, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	; 0x32
 8003b94:	4a3d      	ldr	r2, [pc, #244]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba0:	4419      	add	r1, r3
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009a      	lsls	r2, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb8:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003bba:	fba3 0302 	umull	r0, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2064      	movs	r0, #100	; 0x64
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	3332      	adds	r3, #50	; 0x32
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	440a      	add	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003be0:	e04d      	b.n	8003c7e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be2:	f7fe ff91 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8003be6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	0119      	lsls	r1, r3, #4
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003c20:	fba3 0302 	umull	r0, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	fb00 f303 	mul.w	r3, r0, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	4419      	add	r1, r3
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003c58:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x1b0>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000048 	.word	0x20000048

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2500      	movs	r5, #0
 8003ca0:	4e0c      	ldr	r6, [pc, #48]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1ba4      	subs	r4, r4, r6
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 fc34 	bl	8004518 <_init>
 8003cb0:	2500      	movs	r5, #0
 8003cb2:	4e0a      	ldr	r6, [pc, #40]	; (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1ba4      	subs	r4, r4, r6
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a5      	cmp	r5, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc4:	4798      	blx	r3
 8003cc6:	3501      	adds	r5, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cce:	4798      	blx	r3
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08004b9c 	.word	0x08004b9c
 8003cd8:	08004b9c 	.word	0x08004b9c
 8003cdc:	08004b9c 	.word	0x08004b9c
 8003ce0:	08004ba0 	.word	0x08004ba0

08003ce4 <memset>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4402      	add	r2, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <siprintf>:
 8003cf4:	b40e      	push	{r1, r2, r3}
 8003cf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cfa:	b500      	push	{lr}
 8003cfc:	b09c      	sub	sp, #112	; 0x70
 8003cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003d00:	9002      	str	r0, [sp, #8]
 8003d02:	9006      	str	r0, [sp, #24]
 8003d04:	9107      	str	r1, [sp, #28]
 8003d06:	9104      	str	r1, [sp, #16]
 8003d08:	4808      	ldr	r0, [pc, #32]	; (8003d2c <siprintf+0x38>)
 8003d0a:	4909      	ldr	r1, [pc, #36]	; (8003d30 <siprintf+0x3c>)
 8003d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d10:	9105      	str	r1, [sp, #20]
 8003d12:	6800      	ldr	r0, [r0, #0]
 8003d14:	a902      	add	r1, sp, #8
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	f000 f866 	bl	8003de8 <_svfiprintf_r>
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	9b02      	ldr	r3, [sp, #8]
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	b01c      	add	sp, #112	; 0x70
 8003d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d28:	b003      	add	sp, #12
 8003d2a:	4770      	bx	lr
 8003d2c:	20000048 	.word	0x20000048
 8003d30:	ffff0208 	.word	0xffff0208

08003d34 <__ssputs_r>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	688e      	ldr	r6, [r1, #8]
 8003d3a:	4682      	mov	sl, r0
 8003d3c:	429e      	cmp	r6, r3
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4690      	mov	r8, r2
 8003d42:	4699      	mov	r9, r3
 8003d44:	d837      	bhi.n	8003db6 <__ssputs_r+0x82>
 8003d46:	898a      	ldrh	r2, [r1, #12]
 8003d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d4c:	d031      	beq.n	8003db2 <__ssputs_r+0x7e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	6909      	ldr	r1, [r1, #16]
 8003d54:	1a6f      	subs	r7, r5, r1
 8003d56:	6965      	ldr	r5, [r4, #20]
 8003d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d60:	f109 0301 	add.w	r3, r9, #1
 8003d64:	443b      	add	r3, r7
 8003d66:	429d      	cmp	r5, r3
 8003d68:	bf38      	it	cc
 8003d6a:	461d      	movcc	r5, r3
 8003d6c:	0553      	lsls	r3, r2, #21
 8003d6e:	d530      	bpl.n	8003dd2 <__ssputs_r+0x9e>
 8003d70:	4629      	mov	r1, r5
 8003d72:	f000 fb37 	bl	80043e4 <_malloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	b950      	cbnz	r0, 8003d90 <__ssputs_r+0x5c>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f8ca 3000 	str.w	r3, [sl]
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	463a      	mov	r2, r7
 8003d92:	6921      	ldr	r1, [r4, #16]
 8003d94:	f000 fab6 	bl	8004304 <memcpy>
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	6126      	str	r6, [r4, #16]
 8003da6:	443e      	add	r6, r7
 8003da8:	6026      	str	r6, [r4, #0]
 8003daa:	464e      	mov	r6, r9
 8003dac:	6165      	str	r5, [r4, #20]
 8003dae:	1bed      	subs	r5, r5, r7
 8003db0:	60a5      	str	r5, [r4, #8]
 8003db2:	454e      	cmp	r6, r9
 8003db4:	d900      	bls.n	8003db8 <__ssputs_r+0x84>
 8003db6:	464e      	mov	r6, r9
 8003db8:	4632      	mov	r2, r6
 8003dba:	4641      	mov	r1, r8
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	f000 faac 	bl	800431a <memmove>
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	1b9b      	subs	r3, r3, r6
 8003dc8:	60a3      	str	r3, [r4, #8]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	441e      	add	r6, r3
 8003dce:	6026      	str	r6, [r4, #0]
 8003dd0:	e7dc      	b.n	8003d8c <__ssputs_r+0x58>
 8003dd2:	462a      	mov	r2, r5
 8003dd4:	f000 fb60 	bl	8004498 <_realloc_r>
 8003dd8:	4606      	mov	r6, r0
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d1e2      	bne.n	8003da4 <__ssputs_r+0x70>
 8003dde:	6921      	ldr	r1, [r4, #16]
 8003de0:	4650      	mov	r0, sl
 8003de2:	f000 fab3 	bl	800434c <_free_r>
 8003de6:	e7c8      	b.n	8003d7a <__ssputs_r+0x46>

08003de8 <_svfiprintf_r>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	461d      	mov	r5, r3
 8003dee:	898b      	ldrh	r3, [r1, #12]
 8003df0:	b09d      	sub	sp, #116	; 0x74
 8003df2:	061f      	lsls	r7, r3, #24
 8003df4:	4680      	mov	r8, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4616      	mov	r6, r2
 8003dfa:	d50f      	bpl.n	8003e1c <_svfiprintf_r+0x34>
 8003dfc:	690b      	ldr	r3, [r1, #16]
 8003dfe:	b96b      	cbnz	r3, 8003e1c <_svfiprintf_r+0x34>
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	f000 faef 	bl	80043e4 <_malloc_r>
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	6120      	str	r0, [r4, #16]
 8003e0a:	b928      	cbnz	r0, 8003e18 <_svfiprintf_r+0x30>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	f8c8 3000 	str.w	r3, [r8]
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	e0c8      	b.n	8003faa <_svfiprintf_r+0x1c2>
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	6163      	str	r3, [r4, #20]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	2320      	movs	r3, #32
 8003e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e26:	2330      	movs	r3, #48	; 0x30
 8003e28:	f04f 0b01 	mov.w	fp, #1
 8003e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e30:	9503      	str	r5, [sp, #12]
 8003e32:	4637      	mov	r7, r6
 8003e34:	463d      	mov	r5, r7
 8003e36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e3a:	b10b      	cbz	r3, 8003e40 <_svfiprintf_r+0x58>
 8003e3c:	2b25      	cmp	r3, #37	; 0x25
 8003e3e:	d13e      	bne.n	8003ebe <_svfiprintf_r+0xd6>
 8003e40:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e44:	d00b      	beq.n	8003e5e <_svfiprintf_r+0x76>
 8003e46:	4653      	mov	r3, sl
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	f7ff ff71 	bl	8003d34 <__ssputs_r>
 8003e52:	3001      	adds	r0, #1
 8003e54:	f000 80a4 	beq.w	8003fa0 <_svfiprintf_r+0x1b8>
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	4453      	add	r3, sl
 8003e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5e:	783b      	ldrb	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 809d 	beq.w	8003fa0 <_svfiprintf_r+0x1b8>
 8003e66:	2300      	movs	r3, #0
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	9307      	str	r3, [sp, #28]
 8003e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e78:	931a      	str	r3, [sp, #104]	; 0x68
 8003e7a:	462f      	mov	r7, r5
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e82:	4850      	ldr	r0, [pc, #320]	; (8003fc4 <_svfiprintf_r+0x1dc>)
 8003e84:	f000 fa30 	bl	80042e8 <memchr>
 8003e88:	9b04      	ldr	r3, [sp, #16]
 8003e8a:	b9d0      	cbnz	r0, 8003ec2 <_svfiprintf_r+0xda>
 8003e8c:	06d9      	lsls	r1, r3, #27
 8003e8e:	bf44      	itt	mi
 8003e90:	2220      	movmi	r2, #32
 8003e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e96:	071a      	lsls	r2, r3, #28
 8003e98:	bf44      	itt	mi
 8003e9a:	222b      	movmi	r2, #43	; 0x2b
 8003e9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ea0:	782a      	ldrb	r2, [r5, #0]
 8003ea2:	2a2a      	cmp	r2, #42	; 0x2a
 8003ea4:	d015      	beq.n	8003ed2 <_svfiprintf_r+0xea>
 8003ea6:	462f      	mov	r7, r5
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	250a      	movs	r5, #10
 8003eac:	9a07      	ldr	r2, [sp, #28]
 8003eae:	4639      	mov	r1, r7
 8003eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb4:	3b30      	subs	r3, #48	; 0x30
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d94d      	bls.n	8003f56 <_svfiprintf_r+0x16e>
 8003eba:	b1b8      	cbz	r0, 8003eec <_svfiprintf_r+0x104>
 8003ebc:	e00f      	b.n	8003ede <_svfiprintf_r+0xf6>
 8003ebe:	462f      	mov	r7, r5
 8003ec0:	e7b8      	b.n	8003e34 <_svfiprintf_r+0x4c>
 8003ec2:	4a40      	ldr	r2, [pc, #256]	; (8003fc4 <_svfiprintf_r+0x1dc>)
 8003ec4:	463d      	mov	r5, r7
 8003ec6:	1a80      	subs	r0, r0, r2
 8003ec8:	fa0b f000 	lsl.w	r0, fp, r0
 8003ecc:	4318      	orrs	r0, r3
 8003ece:	9004      	str	r0, [sp, #16]
 8003ed0:	e7d3      	b.n	8003e7a <_svfiprintf_r+0x92>
 8003ed2:	9a03      	ldr	r2, [sp, #12]
 8003ed4:	1d11      	adds	r1, r2, #4
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	9103      	str	r1, [sp, #12]
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	db01      	blt.n	8003ee2 <_svfiprintf_r+0xfa>
 8003ede:	9207      	str	r2, [sp, #28]
 8003ee0:	e004      	b.n	8003eec <_svfiprintf_r+0x104>
 8003ee2:	4252      	negs	r2, r2
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	9207      	str	r2, [sp, #28]
 8003eea:	9304      	str	r3, [sp, #16]
 8003eec:	783b      	ldrb	r3, [r7, #0]
 8003eee:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef0:	d10c      	bne.n	8003f0c <_svfiprintf_r+0x124>
 8003ef2:	787b      	ldrb	r3, [r7, #1]
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d133      	bne.n	8003f60 <_svfiprintf_r+0x178>
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	3702      	adds	r7, #2
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9203      	str	r2, [sp, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	4d2e      	ldr	r5, [pc, #184]	; (8003fc8 <_svfiprintf_r+0x1e0>)
 8003f0e:	2203      	movs	r2, #3
 8003f10:	7839      	ldrb	r1, [r7, #0]
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 f9e8 	bl	80042e8 <memchr>
 8003f18:	b138      	cbz	r0, 8003f2a <_svfiprintf_r+0x142>
 8003f1a:	2340      	movs	r3, #64	; 0x40
 8003f1c:	1b40      	subs	r0, r0, r5
 8003f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f22:	9b04      	ldr	r3, [sp, #16]
 8003f24:	3701      	adds	r7, #1
 8003f26:	4303      	orrs	r3, r0
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	7839      	ldrb	r1, [r7, #0]
 8003f2c:	2206      	movs	r2, #6
 8003f2e:	4827      	ldr	r0, [pc, #156]	; (8003fcc <_svfiprintf_r+0x1e4>)
 8003f30:	1c7e      	adds	r6, r7, #1
 8003f32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f36:	f000 f9d7 	bl	80042e8 <memchr>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d038      	beq.n	8003fb0 <_svfiprintf_r+0x1c8>
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <_svfiprintf_r+0x1e8>)
 8003f40:	bb13      	cbnz	r3, 8003f88 <_svfiprintf_r+0x1a0>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	3307      	adds	r3, #7
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f50:	444b      	add	r3, r9
 8003f52:	9309      	str	r3, [sp, #36]	; 0x24
 8003f54:	e76d      	b.n	8003e32 <_svfiprintf_r+0x4a>
 8003f56:	fb05 3202 	mla	r2, r5, r2, r3
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	460f      	mov	r7, r1
 8003f5e:	e7a6      	b.n	8003eae <_svfiprintf_r+0xc6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	250a      	movs	r5, #10
 8003f64:	4619      	mov	r1, r3
 8003f66:	3701      	adds	r7, #1
 8003f68:	9305      	str	r3, [sp, #20]
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f70:	3a30      	subs	r2, #48	; 0x30
 8003f72:	2a09      	cmp	r2, #9
 8003f74:	d903      	bls.n	8003f7e <_svfiprintf_r+0x196>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0c8      	beq.n	8003f0c <_svfiprintf_r+0x124>
 8003f7a:	9105      	str	r1, [sp, #20]
 8003f7c:	e7c6      	b.n	8003f0c <_svfiprintf_r+0x124>
 8003f7e:	fb05 2101 	mla	r1, r5, r1, r2
 8003f82:	2301      	movs	r3, #1
 8003f84:	4607      	mov	r7, r0
 8003f86:	e7f0      	b.n	8003f6a <_svfiprintf_r+0x182>
 8003f88:	ab03      	add	r3, sp, #12
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <_svfiprintf_r+0x1ec>)
 8003f90:	a904      	add	r1, sp, #16
 8003f92:	4640      	mov	r0, r8
 8003f94:	f3af 8000 	nop.w
 8003f98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f9c:	4681      	mov	r9, r0
 8003f9e:	d1d6      	bne.n	8003f4e <_svfiprintf_r+0x166>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	065b      	lsls	r3, r3, #25
 8003fa4:	f53f af35 	bmi.w	8003e12 <_svfiprintf_r+0x2a>
 8003fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003faa:	b01d      	add	sp, #116	; 0x74
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb0:	ab03      	add	r3, sp, #12
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <_svfiprintf_r+0x1ec>)
 8003fb8:	a904      	add	r1, sp, #16
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f000 f882 	bl	80040c4 <_printf_i>
 8003fc0:	e7ea      	b.n	8003f98 <_svfiprintf_r+0x1b0>
 8003fc2:	bf00      	nop
 8003fc4:	08004b68 	.word	0x08004b68
 8003fc8:	08004b6e 	.word	0x08004b6e
 8003fcc:	08004b72 	.word	0x08004b72
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	08003d35 	.word	0x08003d35

08003fd8 <_printf_common>:
 8003fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fdc:	4691      	mov	r9, r2
 8003fde:	461f      	mov	r7, r3
 8003fe0:	688a      	ldr	r2, [r1, #8]
 8003fe2:	690b      	ldr	r3, [r1, #16]
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	bfb8      	it	lt
 8003fea:	4613      	movlt	r3, r2
 8003fec:	f8c9 3000 	str.w	r3, [r9]
 8003ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffa:	b112      	cbz	r2, 8004002 <_printf_common+0x2a>
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f8c9 3000 	str.w	r3, [r9]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	0699      	lsls	r1, r3, #26
 8004006:	bf42      	ittt	mi
 8004008:	f8d9 3000 	ldrmi.w	r3, [r9]
 800400c:	3302      	addmi	r3, #2
 800400e:	f8c9 3000 	strmi.w	r3, [r9]
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	f015 0506 	ands.w	r5, r5, #6
 8004018:	d107      	bne.n	800402a <_printf_common+0x52>
 800401a:	f104 0a19 	add.w	sl, r4, #25
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	f8d9 2000 	ldr.w	r2, [r9]
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	42ab      	cmp	r3, r5
 8004028:	dc29      	bgt.n	800407e <_printf_common+0xa6>
 800402a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	3300      	adds	r3, #0
 8004032:	bf18      	it	ne
 8004034:	2301      	movne	r3, #1
 8004036:	0692      	lsls	r2, r2, #26
 8004038:	d42e      	bmi.n	8004098 <_printf_common+0xc0>
 800403a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403e:	4639      	mov	r1, r7
 8004040:	4630      	mov	r0, r6
 8004042:	47c0      	blx	r8
 8004044:	3001      	adds	r0, #1
 8004046:	d021      	beq.n	800408c <_printf_common+0xb4>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	68e5      	ldr	r5, [r4, #12]
 800404c:	f003 0306 	and.w	r3, r3, #6
 8004050:	2b04      	cmp	r3, #4
 8004052:	bf18      	it	ne
 8004054:	2500      	movne	r5, #0
 8004056:	f8d9 2000 	ldr.w	r2, [r9]
 800405a:	f04f 0900 	mov.w	r9, #0
 800405e:	bf08      	it	eq
 8004060:	1aad      	subeq	r5, r5, r2
 8004062:	68a3      	ldr	r3, [r4, #8]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	bf08      	it	eq
 8004068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800406c:	4293      	cmp	r3, r2
 800406e:	bfc4      	itt	gt
 8004070:	1a9b      	subgt	r3, r3, r2
 8004072:	18ed      	addgt	r5, r5, r3
 8004074:	341a      	adds	r4, #26
 8004076:	454d      	cmp	r5, r9
 8004078:	d11a      	bne.n	80040b0 <_printf_common+0xd8>
 800407a:	2000      	movs	r0, #0
 800407c:	e008      	b.n	8004090 <_printf_common+0xb8>
 800407e:	2301      	movs	r3, #1
 8004080:	4652      	mov	r2, sl
 8004082:	4639      	mov	r1, r7
 8004084:	4630      	mov	r0, r6
 8004086:	47c0      	blx	r8
 8004088:	3001      	adds	r0, #1
 800408a:	d103      	bne.n	8004094 <_printf_common+0xbc>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004094:	3501      	adds	r5, #1
 8004096:	e7c2      	b.n	800401e <_printf_common+0x46>
 8004098:	2030      	movs	r0, #48	; 0x30
 800409a:	18e1      	adds	r1, r4, r3
 800409c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a6:	4422      	add	r2, r4
 80040a8:	3302      	adds	r3, #2
 80040aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ae:	e7c4      	b.n	800403a <_printf_common+0x62>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4622      	mov	r2, r4
 80040b4:	4639      	mov	r1, r7
 80040b6:	4630      	mov	r0, r6
 80040b8:	47c0      	blx	r8
 80040ba:	3001      	adds	r0, #1
 80040bc:	d0e6      	beq.n	800408c <_printf_common+0xb4>
 80040be:	f109 0901 	add.w	r9, r9, #1
 80040c2:	e7d8      	b.n	8004076 <_printf_common+0x9e>

080040c4 <_printf_i>:
 80040c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040cc:	460c      	mov	r4, r1
 80040ce:	7e09      	ldrb	r1, [r1, #24]
 80040d0:	b085      	sub	sp, #20
 80040d2:	296e      	cmp	r1, #110	; 0x6e
 80040d4:	4617      	mov	r7, r2
 80040d6:	4606      	mov	r6, r0
 80040d8:	4698      	mov	r8, r3
 80040da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040dc:	f000 80b3 	beq.w	8004246 <_printf_i+0x182>
 80040e0:	d822      	bhi.n	8004128 <_printf_i+0x64>
 80040e2:	2963      	cmp	r1, #99	; 0x63
 80040e4:	d036      	beq.n	8004154 <_printf_i+0x90>
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x3a>
 80040e8:	2900      	cmp	r1, #0
 80040ea:	f000 80b9 	beq.w	8004260 <_printf_i+0x19c>
 80040ee:	2958      	cmp	r1, #88	; 0x58
 80040f0:	f000 8083 	beq.w	80041fa <_printf_i+0x136>
 80040f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040fc:	e032      	b.n	8004164 <_printf_i+0xa0>
 80040fe:	2964      	cmp	r1, #100	; 0x64
 8004100:	d001      	beq.n	8004106 <_printf_i+0x42>
 8004102:	2969      	cmp	r1, #105	; 0x69
 8004104:	d1f6      	bne.n	80040f4 <_printf_i+0x30>
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	0605      	lsls	r5, r0, #24
 800410c:	f103 0104 	add.w	r1, r3, #4
 8004110:	d52a      	bpl.n	8004168 <_printf_i+0xa4>
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da03      	bge.n	8004122 <_printf_i+0x5e>
 800411a:	222d      	movs	r2, #45	; 0x2d
 800411c:	425b      	negs	r3, r3
 800411e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004122:	486f      	ldr	r0, [pc, #444]	; (80042e0 <_printf_i+0x21c>)
 8004124:	220a      	movs	r2, #10
 8004126:	e039      	b.n	800419c <_printf_i+0xd8>
 8004128:	2973      	cmp	r1, #115	; 0x73
 800412a:	f000 809d 	beq.w	8004268 <_printf_i+0x1a4>
 800412e:	d808      	bhi.n	8004142 <_printf_i+0x7e>
 8004130:	296f      	cmp	r1, #111	; 0x6f
 8004132:	d020      	beq.n	8004176 <_printf_i+0xb2>
 8004134:	2970      	cmp	r1, #112	; 0x70
 8004136:	d1dd      	bne.n	80040f4 <_printf_i+0x30>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	f043 0320 	orr.w	r3, r3, #32
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	e003      	b.n	800414a <_printf_i+0x86>
 8004142:	2975      	cmp	r1, #117	; 0x75
 8004144:	d017      	beq.n	8004176 <_printf_i+0xb2>
 8004146:	2978      	cmp	r1, #120	; 0x78
 8004148:	d1d4      	bne.n	80040f4 <_printf_i+0x30>
 800414a:	2378      	movs	r3, #120	; 0x78
 800414c:	4865      	ldr	r0, [pc, #404]	; (80042e4 <_printf_i+0x220>)
 800414e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004152:	e055      	b.n	8004200 <_printf_i+0x13c>
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800415a:	1d19      	adds	r1, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6011      	str	r1, [r2, #0]
 8004160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004164:	2301      	movs	r3, #1
 8004166:	e08c      	b.n	8004282 <_printf_i+0x1be>
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800416e:	6011      	str	r1, [r2, #0]
 8004170:	bf18      	it	ne
 8004172:	b21b      	sxthne	r3, r3
 8004174:	e7cf      	b.n	8004116 <_printf_i+0x52>
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6010      	str	r0, [r2, #0]
 800417e:	0628      	lsls	r0, r5, #24
 8004180:	d501      	bpl.n	8004186 <_printf_i+0xc2>
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e002      	b.n	800418c <_printf_i+0xc8>
 8004186:	0668      	lsls	r0, r5, #25
 8004188:	d5fb      	bpl.n	8004182 <_printf_i+0xbe>
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	296f      	cmp	r1, #111	; 0x6f
 800418e:	bf14      	ite	ne
 8004190:	220a      	movne	r2, #10
 8004192:	2208      	moveq	r2, #8
 8004194:	4852      	ldr	r0, [pc, #328]	; (80042e0 <_printf_i+0x21c>)
 8004196:	2100      	movs	r1, #0
 8004198:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800419c:	6865      	ldr	r5, [r4, #4]
 800419e:	2d00      	cmp	r5, #0
 80041a0:	60a5      	str	r5, [r4, #8]
 80041a2:	f2c0 8095 	blt.w	80042d0 <_printf_i+0x20c>
 80041a6:	6821      	ldr	r1, [r4, #0]
 80041a8:	f021 0104 	bic.w	r1, r1, #4
 80041ac:	6021      	str	r1, [r4, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d13d      	bne.n	800422e <_printf_i+0x16a>
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	f040 808e 	bne.w	80042d4 <_printf_i+0x210>
 80041b8:	4665      	mov	r5, ip
 80041ba:	2a08      	cmp	r2, #8
 80041bc:	d10b      	bne.n	80041d6 <_printf_i+0x112>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	07db      	lsls	r3, r3, #31
 80041c2:	d508      	bpl.n	80041d6 <_printf_i+0x112>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	bfde      	ittt	le
 80041cc:	2330      	movle	r3, #48	; 0x30
 80041ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041d6:	ebac 0305 	sub.w	r3, ip, r5
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	f8cd 8000 	str.w	r8, [sp]
 80041e0:	463b      	mov	r3, r7
 80041e2:	aa03      	add	r2, sp, #12
 80041e4:	4621      	mov	r1, r4
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff fef6 	bl	8003fd8 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d14d      	bne.n	800428c <_printf_i+0x1c8>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b005      	add	sp, #20
 80041f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041fa:	4839      	ldr	r0, [pc, #228]	; (80042e0 <_printf_i+0x21c>)
 80041fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	6821      	ldr	r1, [r4, #0]
 8004204:	1d1d      	adds	r5, r3, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6015      	str	r5, [r2, #0]
 800420a:	060a      	lsls	r2, r1, #24
 800420c:	d50b      	bpl.n	8004226 <_printf_i+0x162>
 800420e:	07ca      	lsls	r2, r1, #31
 8004210:	bf44      	itt	mi
 8004212:	f041 0120 	orrmi.w	r1, r1, #32
 8004216:	6021      	strmi	r1, [r4, #0]
 8004218:	b91b      	cbnz	r3, 8004222 <_printf_i+0x15e>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	f022 0220 	bic.w	r2, r2, #32
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	e7b7      	b.n	8004196 <_printf_i+0xd2>
 8004226:	064d      	lsls	r5, r1, #25
 8004228:	bf48      	it	mi
 800422a:	b29b      	uxthmi	r3, r3
 800422c:	e7ef      	b.n	800420e <_printf_i+0x14a>
 800422e:	4665      	mov	r5, ip
 8004230:	fbb3 f1f2 	udiv	r1, r3, r2
 8004234:	fb02 3311 	mls	r3, r2, r1, r3
 8004238:	5cc3      	ldrb	r3, [r0, r3]
 800423a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800423e:	460b      	mov	r3, r1
 8004240:	2900      	cmp	r1, #0
 8004242:	d1f5      	bne.n	8004230 <_printf_i+0x16c>
 8004244:	e7b9      	b.n	80041ba <_printf_i+0xf6>
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	1d18      	adds	r0, r3, #4
 800424c:	6961      	ldr	r1, [r4, #20]
 800424e:	6010      	str	r0, [r2, #0]
 8004250:	0628      	lsls	r0, r5, #24
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	d501      	bpl.n	800425a <_printf_i+0x196>
 8004256:	6019      	str	r1, [r3, #0]
 8004258:	e002      	b.n	8004260 <_printf_i+0x19c>
 800425a:	066a      	lsls	r2, r5, #25
 800425c:	d5fb      	bpl.n	8004256 <_printf_i+0x192>
 800425e:	8019      	strh	r1, [r3, #0]
 8004260:	2300      	movs	r3, #0
 8004262:	4665      	mov	r5, ip
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	e7b9      	b.n	80041dc <_printf_i+0x118>
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	1d19      	adds	r1, r3, #4
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	681d      	ldr	r5, [r3, #0]
 8004270:	6862      	ldr	r2, [r4, #4]
 8004272:	2100      	movs	r1, #0
 8004274:	4628      	mov	r0, r5
 8004276:	f000 f837 	bl	80042e8 <memchr>
 800427a:	b108      	cbz	r0, 8004280 <_printf_i+0x1bc>
 800427c:	1b40      	subs	r0, r0, r5
 800427e:	6060      	str	r0, [r4, #4]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	2300      	movs	r3, #0
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428a:	e7a7      	b.n	80041dc <_printf_i+0x118>
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	462a      	mov	r2, r5
 8004290:	4639      	mov	r1, r7
 8004292:	4630      	mov	r0, r6
 8004294:	47c0      	blx	r8
 8004296:	3001      	adds	r0, #1
 8004298:	d0aa      	beq.n	80041f0 <_printf_i+0x12c>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	079b      	lsls	r3, r3, #30
 800429e:	d413      	bmi.n	80042c8 <_printf_i+0x204>
 80042a0:	68e0      	ldr	r0, [r4, #12]
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	4298      	cmp	r0, r3
 80042a6:	bfb8      	it	lt
 80042a8:	4618      	movlt	r0, r3
 80042aa:	e7a3      	b.n	80041f4 <_printf_i+0x130>
 80042ac:	2301      	movs	r3, #1
 80042ae:	464a      	mov	r2, r9
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d09a      	beq.n	80041f0 <_printf_i+0x12c>
 80042ba:	3501      	adds	r5, #1
 80042bc:	68e3      	ldr	r3, [r4, #12]
 80042be:	9a03      	ldr	r2, [sp, #12]
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	42ab      	cmp	r3, r5
 80042c4:	dcf2      	bgt.n	80042ac <_printf_i+0x1e8>
 80042c6:	e7eb      	b.n	80042a0 <_printf_i+0x1dc>
 80042c8:	2500      	movs	r5, #0
 80042ca:	f104 0919 	add.w	r9, r4, #25
 80042ce:	e7f5      	b.n	80042bc <_printf_i+0x1f8>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ac      	bne.n	800422e <_printf_i+0x16a>
 80042d4:	7803      	ldrb	r3, [r0, #0]
 80042d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042de:	e76c      	b.n	80041ba <_printf_i+0xf6>
 80042e0:	08004b79 	.word	0x08004b79
 80042e4:	08004b8a 	.word	0x08004b8a

080042e8 <memchr>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	b2c9      	uxtb	r1, r1
 80042ec:	4402      	add	r2, r0
 80042ee:	4290      	cmp	r0, r2
 80042f0:	4603      	mov	r3, r0
 80042f2:	d101      	bne.n	80042f8 <memchr+0x10>
 80042f4:	2300      	movs	r3, #0
 80042f6:	e003      	b.n	8004300 <memchr+0x18>
 80042f8:	781c      	ldrb	r4, [r3, #0]
 80042fa:	3001      	adds	r0, #1
 80042fc:	428c      	cmp	r4, r1
 80042fe:	d1f6      	bne.n	80042ee <memchr+0x6>
 8004300:	4618      	mov	r0, r3
 8004302:	bd10      	pop	{r4, pc}

08004304 <memcpy>:
 8004304:	b510      	push	{r4, lr}
 8004306:	1e43      	subs	r3, r0, #1
 8004308:	440a      	add	r2, r1
 800430a:	4291      	cmp	r1, r2
 800430c:	d100      	bne.n	8004310 <memcpy+0xc>
 800430e:	bd10      	pop	{r4, pc}
 8004310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004318:	e7f7      	b.n	800430a <memcpy+0x6>

0800431a <memmove>:
 800431a:	4288      	cmp	r0, r1
 800431c:	b510      	push	{r4, lr}
 800431e:	eb01 0302 	add.w	r3, r1, r2
 8004322:	d807      	bhi.n	8004334 <memmove+0x1a>
 8004324:	1e42      	subs	r2, r0, #1
 8004326:	4299      	cmp	r1, r3
 8004328:	d00a      	beq.n	8004340 <memmove+0x26>
 800432a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004332:	e7f8      	b.n	8004326 <memmove+0xc>
 8004334:	4283      	cmp	r3, r0
 8004336:	d9f5      	bls.n	8004324 <memmove+0xa>
 8004338:	1881      	adds	r1, r0, r2
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	42d3      	cmn	r3, r2
 800433e:	d100      	bne.n	8004342 <memmove+0x28>
 8004340:	bd10      	pop	{r4, pc}
 8004342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004346:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800434a:	e7f7      	b.n	800433c <memmove+0x22>

0800434c <_free_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4605      	mov	r5, r0
 8004350:	2900      	cmp	r1, #0
 8004352:	d043      	beq.n	80043dc <_free_r+0x90>
 8004354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004358:	1f0c      	subs	r4, r1, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfb8      	it	lt
 800435e:	18e4      	addlt	r4, r4, r3
 8004360:	f000 f8d0 	bl	8004504 <__malloc_lock>
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <_free_r+0x94>)
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	4610      	mov	r0, r2
 800436a:	b933      	cbnz	r3, 800437a <_free_r+0x2e>
 800436c:	6063      	str	r3, [r4, #4]
 800436e:	6014      	str	r4, [r2, #0]
 8004370:	4628      	mov	r0, r5
 8004372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004376:	f000 b8c6 	b.w	8004506 <__malloc_unlock>
 800437a:	42a3      	cmp	r3, r4
 800437c:	d90b      	bls.n	8004396 <_free_r+0x4a>
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	1862      	adds	r2, r4, r1
 8004382:	4293      	cmp	r3, r2
 8004384:	bf01      	itttt	eq
 8004386:	681a      	ldreq	r2, [r3, #0]
 8004388:	685b      	ldreq	r3, [r3, #4]
 800438a:	1852      	addeq	r2, r2, r1
 800438c:	6022      	streq	r2, [r4, #0]
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	6004      	str	r4, [r0, #0]
 8004392:	e7ed      	b.n	8004370 <_free_r+0x24>
 8004394:	4613      	mov	r3, r2
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	b10a      	cbz	r2, 800439e <_free_r+0x52>
 800439a:	42a2      	cmp	r2, r4
 800439c:	d9fa      	bls.n	8004394 <_free_r+0x48>
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	1858      	adds	r0, r3, r1
 80043a2:	42a0      	cmp	r0, r4
 80043a4:	d10b      	bne.n	80043be <_free_r+0x72>
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	4401      	add	r1, r0
 80043aa:	1858      	adds	r0, r3, r1
 80043ac:	4282      	cmp	r2, r0
 80043ae:	6019      	str	r1, [r3, #0]
 80043b0:	d1de      	bne.n	8004370 <_free_r+0x24>
 80043b2:	6810      	ldr	r0, [r2, #0]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	4401      	add	r1, r0
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e7d8      	b.n	8004370 <_free_r+0x24>
 80043be:	d902      	bls.n	80043c6 <_free_r+0x7a>
 80043c0:	230c      	movs	r3, #12
 80043c2:	602b      	str	r3, [r5, #0]
 80043c4:	e7d4      	b.n	8004370 <_free_r+0x24>
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	1821      	adds	r1, r4, r0
 80043ca:	428a      	cmp	r2, r1
 80043cc:	bf01      	itttt	eq
 80043ce:	6811      	ldreq	r1, [r2, #0]
 80043d0:	6852      	ldreq	r2, [r2, #4]
 80043d2:	1809      	addeq	r1, r1, r0
 80043d4:	6021      	streq	r1, [r4, #0]
 80043d6:	6062      	str	r2, [r4, #4]
 80043d8:	605c      	str	r4, [r3, #4]
 80043da:	e7c9      	b.n	8004370 <_free_r+0x24>
 80043dc:	bd38      	pop	{r3, r4, r5, pc}
 80043de:	bf00      	nop
 80043e0:	200004e0 	.word	0x200004e0

080043e4 <_malloc_r>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	1ccd      	adds	r5, r1, #3
 80043e8:	f025 0503 	bic.w	r5, r5, #3
 80043ec:	3508      	adds	r5, #8
 80043ee:	2d0c      	cmp	r5, #12
 80043f0:	bf38      	it	cc
 80043f2:	250c      	movcc	r5, #12
 80043f4:	2d00      	cmp	r5, #0
 80043f6:	4606      	mov	r6, r0
 80043f8:	db01      	blt.n	80043fe <_malloc_r+0x1a>
 80043fa:	42a9      	cmp	r1, r5
 80043fc:	d903      	bls.n	8004406 <_malloc_r+0x22>
 80043fe:	230c      	movs	r3, #12
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	2000      	movs	r0, #0
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	f000 f87d 	bl	8004504 <__malloc_lock>
 800440a:	4a21      	ldr	r2, [pc, #132]	; (8004490 <_malloc_r+0xac>)
 800440c:	6814      	ldr	r4, [r2, #0]
 800440e:	4621      	mov	r1, r4
 8004410:	b991      	cbnz	r1, 8004438 <_malloc_r+0x54>
 8004412:	4c20      	ldr	r4, [pc, #128]	; (8004494 <_malloc_r+0xb0>)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	b91b      	cbnz	r3, 8004420 <_malloc_r+0x3c>
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f863 	bl	80044e4 <_sbrk_r>
 800441e:	6020      	str	r0, [r4, #0]
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f000 f85e 	bl	80044e4 <_sbrk_r>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d124      	bne.n	8004476 <_malloc_r+0x92>
 800442c:	230c      	movs	r3, #12
 800442e:	4630      	mov	r0, r6
 8004430:	6033      	str	r3, [r6, #0]
 8004432:	f000 f868 	bl	8004506 <__malloc_unlock>
 8004436:	e7e4      	b.n	8004402 <_malloc_r+0x1e>
 8004438:	680b      	ldr	r3, [r1, #0]
 800443a:	1b5b      	subs	r3, r3, r5
 800443c:	d418      	bmi.n	8004470 <_malloc_r+0x8c>
 800443e:	2b0b      	cmp	r3, #11
 8004440:	d90f      	bls.n	8004462 <_malloc_r+0x7e>
 8004442:	600b      	str	r3, [r1, #0]
 8004444:	18cc      	adds	r4, r1, r3
 8004446:	50cd      	str	r5, [r1, r3]
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f85c 	bl	8004506 <__malloc_unlock>
 800444e:	f104 000b 	add.w	r0, r4, #11
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	f020 0007 	bic.w	r0, r0, #7
 8004458:	1ac3      	subs	r3, r0, r3
 800445a:	d0d3      	beq.n	8004404 <_malloc_r+0x20>
 800445c:	425a      	negs	r2, r3
 800445e:	50e2      	str	r2, [r4, r3]
 8004460:	e7d0      	b.n	8004404 <_malloc_r+0x20>
 8004462:	684b      	ldr	r3, [r1, #4]
 8004464:	428c      	cmp	r4, r1
 8004466:	bf16      	itet	ne
 8004468:	6063      	strne	r3, [r4, #4]
 800446a:	6013      	streq	r3, [r2, #0]
 800446c:	460c      	movne	r4, r1
 800446e:	e7eb      	b.n	8004448 <_malloc_r+0x64>
 8004470:	460c      	mov	r4, r1
 8004472:	6849      	ldr	r1, [r1, #4]
 8004474:	e7cc      	b.n	8004410 <_malloc_r+0x2c>
 8004476:	1cc4      	adds	r4, r0, #3
 8004478:	f024 0403 	bic.w	r4, r4, #3
 800447c:	42a0      	cmp	r0, r4
 800447e:	d005      	beq.n	800448c <_malloc_r+0xa8>
 8004480:	1a21      	subs	r1, r4, r0
 8004482:	4630      	mov	r0, r6
 8004484:	f000 f82e 	bl	80044e4 <_sbrk_r>
 8004488:	3001      	adds	r0, #1
 800448a:	d0cf      	beq.n	800442c <_malloc_r+0x48>
 800448c:	6025      	str	r5, [r4, #0]
 800448e:	e7db      	b.n	8004448 <_malloc_r+0x64>
 8004490:	200004e0 	.word	0x200004e0
 8004494:	200004e4 	.word	0x200004e4

08004498 <_realloc_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	4607      	mov	r7, r0
 800449c:	4614      	mov	r4, r2
 800449e:	460e      	mov	r6, r1
 80044a0:	b921      	cbnz	r1, 80044ac <_realloc_r+0x14>
 80044a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044a6:	4611      	mov	r1, r2
 80044a8:	f7ff bf9c 	b.w	80043e4 <_malloc_r>
 80044ac:	b922      	cbnz	r2, 80044b8 <_realloc_r+0x20>
 80044ae:	f7ff ff4d 	bl	800434c <_free_r>
 80044b2:	4625      	mov	r5, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	f000 f826 	bl	8004508 <_malloc_usable_size_r>
 80044bc:	42a0      	cmp	r0, r4
 80044be:	d20f      	bcs.n	80044e0 <_realloc_r+0x48>
 80044c0:	4621      	mov	r1, r4
 80044c2:	4638      	mov	r0, r7
 80044c4:	f7ff ff8e 	bl	80043e4 <_malloc_r>
 80044c8:	4605      	mov	r5, r0
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d0f2      	beq.n	80044b4 <_realloc_r+0x1c>
 80044ce:	4631      	mov	r1, r6
 80044d0:	4622      	mov	r2, r4
 80044d2:	f7ff ff17 	bl	8004304 <memcpy>
 80044d6:	4631      	mov	r1, r6
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff ff37 	bl	800434c <_free_r>
 80044de:	e7e9      	b.n	80044b4 <_realloc_r+0x1c>
 80044e0:	4635      	mov	r5, r6
 80044e2:	e7e7      	b.n	80044b4 <_realloc_r+0x1c>

080044e4 <_sbrk_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	2300      	movs	r3, #0
 80044e8:	4c05      	ldr	r4, [pc, #20]	; (8004500 <_sbrk_r+0x1c>)
 80044ea:	4605      	mov	r5, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	f7fc fdfc 	bl	80010ec <_sbrk>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_sbrk_r+0x1a>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_sbrk_r+0x1a>
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	20000634 	.word	0x20000634

08004504 <__malloc_lock>:
 8004504:	4770      	bx	lr

08004506 <__malloc_unlock>:
 8004506:	4770      	bx	lr

08004508 <_malloc_usable_size_r>:
 8004508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450c:	1f18      	subs	r0, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfbc      	itt	lt
 8004512:	580b      	ldrlt	r3, [r1, r0]
 8004514:	18c0      	addlt	r0, r0, r3
 8004516:	4770      	bx	lr

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
